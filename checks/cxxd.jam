#  (C) Copyright Edward Diener 2016.
#  Use, modification and distribution are subject to the 
#  Boost Software License, Version 1.0. (See accompanying file 
#  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

import project ;
import regex ;
import sequence ;
import "class" : new ;

project.extension cxxd checks ;

module cxxd
    {
    
    target_prepend = cxxd_check_obj_ ;
    
    rule requires.boost ( names + : tprops * : fprops * )
        {
        return [ requires.append $(names) : $(tprops) : $(fprops) : "0" ] ;
        }
    
    rule requires.std ( names + : tprops * : fprops * )
        {
        return [ requires.append $(names) : $(tprops) : $(fprops) : "1" ] ;
        }   

    rule requires.specify ( names + : tprops * : fprops * )
        {
        return [ requires.append $(names) : $(tprops) : $(fprops) ] ;
        }

    local rule requires.append ( names + : tprops * : fprops * : nappend ? )
        {
        
        local project_target = [ project.target $(__name__) ] ;
        
        project.push-current $(project_target) ;
        
        local iname ;
        local defs ;
        local vnames ;
        local result ;
        
        for name in $(names)
            {
            if ! ( $(name) in $(iname) )
                {
                iname += $(name) ;
                
                local res = [ requires.transform $(name) : $(nappend) ] ;
                
                if $(res)
                    {
                    defs += "<define>"$(res) ;
                    vnames += $(name) ;
                    }
                }
            }
        if $(vnames)
            {

            local jvnames = [ sequence.join cxxd $(vnames) : "-" ] ;
            local key = [ MD5 $(jvnames) ] ;
            local build_target = /checks/cxxd//$(target_prepend)$(key) ;
            
            requires.message.($(build_target)) = $(jvnames) ;
            requires.create_target $(key) : $(defs) ;
            
            local instance = [ new requirements-evaluator $(build_target) : $(tprops) : $(fprops) ] ;
            result = <conditional>@$(instance).set_requirements ;
            }
       
        project.pop-current ;
        return $(result) ;
        }
        
    local rule requires.create_target ( pkey : pdefs + )
        {
        # Need to use absolute paths because we don't know the
        # context of the invocation which affects where the paths
        # originate from.
        local cxxd_jam = [ modules.binding $(__name__) ] ;
        local source_path = $(cxxd_jam:D)/cxxd_check.cpp ;
        local include_path = $(cxxd_jam:D)/../../.. ;
        obj $(target_prepend)$(pkey) : $(source_path) : <include>$(include_path) $(pdefs) ;
        explicit $(target_prepend)$(pkey) ;
        return $(target_prepend)$(pkey) ;
        }
        
    class requirements-evaluator
        {
        
        import configure ;
        
        rule __init__ ( bt : true-properties * : false-properties * )
            {
            self.bt = $(bt) ;
            self.true-properties = $(true-properties) ;
            self.false-properties = $(false-properties) ;
            }
            
        rule set_requirements ( properties * )
            {
            
            local res ;
            local message = [ modules.peek cxxd : requires.message.($(self.bt)) ] ;
            
            if [ configure.builds $(self.bt) : $(properties) : $(message) ]
                {
                res = $(self.true-properties) ;
                }
            else
                {
                res = $(self.false-properties) ;
                }
            return $(res) ;
            }
            
        }
    
    local rule requires.transform ( name : nappend ? )
        {
        
        local nparts = [ regex.split $(name) "," ] ;
        local jname ;
        local jappend ;
        local result ;
        
        if ( [ sequence.length $(nparts) ] = 1 )
            {
            jname = $(name) ;
            jappend = $(nappend) ;
            }
        else
            {
            jname = $(nparts[1]) ;
            jappend = $(nparts[2]) ;
            }
        switch $(jname)
            {
            case "array" : result = [ sequence.join CXXD_TEST_ARRAY "=" $(jappend) ] ;
            case "atomic" : result = [ sequence.join CXXD_TEST_ATOMIC "=" $(jappend) ] ;
            case "bind" : result = [ sequence.join CXXD_TEST_BIND "=" $(jappend) ] ;
            case "chrono" : result = [ sequence.join CXXD_TEST_CHRONO "=" $(jappend) ] ;
            case "condition_variable" : result = [ sequence.join CXXD_TEST_CONDITION_VARIABLE "=" $(jappend) ] ;
            case "enable_shared_from_this" : result = [ sequence.join CXXD_TEST_ENABLE_SHARED_FROM_THIS "=" $(jappend) ] ;
            case "function" : result = [ sequence.join CXXD_TEST_FUNCTION "=" $(jappend) ] ;
            case "hash" : result = [ sequence.join CXXD_TEST_HASH "=" $(jappend) ] ;
            case "make_shared" : result = [ sequence.join CXXD_TEST_MAKE_SHARED "=" $(jappend) ] ;
            case "mem_fn" : result = [ sequence.join CXXD_TEST_MEM_FN "=" $(jappend) ] ;
            case "move" : result = [ sequence.join CXXD_TEST_MOVE "=" $(jappend) ] ;
            case "mutex" : result = [ sequence.join CXXD_TEST_MUTEX "=" $(jappend) ] ;
            case "random" : result = [ sequence.join CXXD_TEST_RANDOM "=" $(jappend) ] ;
            case "ratio" : result = [ sequence.join CXXD_TEST_RATIO "=" $(jappend) ] ;
            case "ref" : result = [ sequence.join CXXD_TEST_REF "=" $(jappend) ] ;
            case "regex" : result = [ sequence.join CXXD_TEST_REGEX "=" $(jappend) ] ;
            case "shared_mutex" : result = [ sequence.join CXXD_TEST_SHARED_MUTEX "=" $(jappend) ] ;
            case "shared_ptr" : result = [ sequence.join CXXD_TEST_SHARED_PTR "=" $(jappend) ] ;
            case "system_error" : result = [ sequence.join CXXD_TEST_SYSTEM_ERROR "=" $(jappend) ] ;
            case "thread" : result = [ sequence.join CXXD_TEST_THREAD "=" $(jappend) ] ;
            case "tuple" : result = [ sequence.join CXXD_TEST_TUPLE "=" $(jappend) ] ;
            case "type_index" : result = [ sequence.join CXXD_TEST_TYPE_INDEX "=" $(jappend) ] ;
            case "type_traits" : result = [ sequence.join CXXD_TEST_TYPE_TRAITS "=" $(jappend) ] ;
            case "unordered_map" : result = [ sequence.join CXXD_TEST_UNORDERED_MAP "=" $(jappend) ] ;
            case "unordered_multimap" : result = [ sequence.join CXXD_TEST_UNORDERED_MULTIMAP "=" $(jappend) ] ;
            case "unordered_multiset" : result = [ sequence.join CXXD_TEST_UNORDERED_MULTISET "=" $(jappend) ] ;
            case "unordered_set" : result = [ sequence.join CXXD_TEST_UNORDERED_SET "=" $(jappend) ] ;
            case "weak_ptr" : result = [ sequence.join CXXD_TEST_WEAK_PTR "=" $(jappend) ] ;
            }
        return $(result) ;
        }
   }
