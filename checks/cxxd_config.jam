#  (C) Copyright Edward Diener 2016.
#  Use, modification and distribution are subject to the 
#  Boost Software License, Version 1.0. (See accompanying file 
#  LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

import sequence ;
import ../../config/checks/config : requires ;
import ../../config/checks/config : requires.set.properties ;

module cxxd_config
    {
    
    rule requires.boost ( names + : tprops * : fprops * )
        {
        local pret ;
        local cnames = [ sequence.unique [ requires.transform $(names) ] ] ;
        
        for name in $(cnames)
            {
            if ! $(pret)
                {
                if ! [ requires $(name) ]
                    {
                    pret = $(fprops) ;
                    }
                }
            }
        if ! $(pret)
            {
            pret = $(tprops) ;
            }
        
        return $(pret) ;
        }
    
    rule requires.std ( names + : tprops * : fprops * )
        {
        local cnames = [ sequence.unique [ requires.transform $(names) ] ] ;
        return [ requires.set.properties $(cnames) : $(tprops) : $(fprops) ] ;
        }
    
    local rule requires.transform ( names + )
        {
        
        local result ;
        
        for name in $(names)
            {
            switch $(name)
                {
                case cxxd_array : result += cxx11_hdr_array ;
                case cxxd_atomic : result += cxx11_hdr_atomic ;
                case cxxd_bind : result += cxx11_hdr_functional ;
                case cxxd_chrono : result += cxx11_hdr_chrono ;
                case cxxd_condition_variable : result += cxx11_hdr_condition_variable ;
                case cxxd_enabled_shared_from_this : result += cxx11_smart_ptr ;
                case cxxd_function : result += cxx11_hdr_functional ;
                case cxxd_hash : result += cxx11_hdr_functional ;
                case cxxd_make_shared : result += cxx11_smart_ptr ;
                case cxxd_mem_fn : result += cxx11_hdr_functional ;
                case cxxd_move : result += cxx11_rvalue_references ;
                case cxxd_mutex : result += cxx11_hdr_mutex ;
                case cxxd_random : result += cxx11_hdr_random ;
                case cxxd_ratio : result += cxx11_hdr_ratio ;
                case cxxd_ref : result += cxx11_hdr_functional ;
                case cxxd_regex : result += cxx11_hdr_regex ;
                case cxxd_shared_mutex : result += cxx14_hdr_shared_mutex ;
                case cxxd_shared_ptr : result += cxx11_smart_ptr ;
                case cxxd_system_error : result += cxx11_hdr_system_error ;
                case cxxd_thread : result += cxx11_hdr_thread ;
                case cxxd_tuple : result += cxx11_hdr_tuple ;
                case cxxd_type_index : result += cxx11_hdr_typeindex ;
                case cxxd_type_traits : result += cxx11_hdr_type_traits ;
                case cxxd_unordered_map : result += cxx11_hdr_unordered_map ;
                case cxxd_unordered_multimap : result += cxx11_hdr_unordered_map ;
                case cxxd_unordered_multiset : result += cxx11_hdr_unordered_set ;
                case cxxd_unordered_set : result += cxx11_hdr_unordered_set ;
                case cxxd_weak_ptr : result += cxx11_smart_ptr ;
                }
            }
       return $(result) ;
       }
       
    }
