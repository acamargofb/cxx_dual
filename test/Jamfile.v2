#  (C) Copyright Edward Diener 2015-2016
#  Use, modification and distribution are subject to the Boost Software License,
#  Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
#  http://www.boost.org/LICENSE_1_0.txt).
#
# Cxx_dual testing Jamfile
#

import testing ;
import ../../predef/check/predef
    : check require
    : predef-check predef-require ;

project cxxd_tests : requirements <warnings>on
                                  <test-info>always_show_run_output
                                  <toolset>msvc:<warnings>all
                                  <toolset>gcc:<warnings>all
                                  [ predef-check "BOOST_COMP_GNUC >= 4.7.4" : : <cxxflags>-ftrack-macro-expansion=0 ]
                                  [ predef-check "BOOST_COMP_GNUC >= 4.3.0" : : <cxxflags>-Wno-variadic-macros ]
                                  [ predef-check "BOOST_COMP_GNUC >= 4.3.0" : : <cxxflags>-Wno-pedantic ]
                                  <toolset>gcc-4.3.0:<cxxflags>-U__STRICT_ANSI__
                                  <toolset>gcc-4.4.0:<cxxflags>-U__STRICT_ANSI__
                                  <toolset>gcc-4.5.2:<linkflags>"-Wl,--enable-auto-import"
                                  ;
                                                 
alias cxxd_tall
    : 
       [ run test_all.cpp ]
       [ run test_all_mods.cpp ]
    ;

alias cxxd_tln
    :
       [ run test_library_name.cpp : : : <define>BOOST_PP_VARIADICS=1 ]
       [ run test_library_name2.cpp : : : <define>BOOST_PP_VARIADICS=1 ]
       [ run test_library_name3.cpp : : : <define>BOOST_PP_VARIADICS=1 ]
       [ run test_library_name4.cpp : : : <define>BOOST_PP_VARIADICS=1 ]
       [ run test_library_name5.cpp : : : <define>BOOST_PP_VARIADICS=1 ]
       [ run test_library_name6.cpp : : : <define>BOOST_PP_VARIADICS=1 ]
       [ run test_library_name7.cpp : : : <define>BOOST_PP_VARIADICS=1 ]
    ;

alias cxxd_tvv
    : 
       [ run test_valid_variants.cpp : : : <define>BOOST_PP_VARIADICS=1 ]
       [ run test_valid_variants2.cpp : : : <define>BOOST_PP_VARIADICS=1 ]
       [ run test_valid_variants3.cpp : : : <define>BOOST_PP_VARIADICS=1 ]
       [ run test_valid_variants4.cpp : : : <define>BOOST_PP_VARIADICS=1 ]
       [ run test_valid_variants5.cpp : : : <define>BOOST_PP_VARIADICS=1 ]
       [ run test_valid_variants6.cpp : : : <define>BOOST_PP_VARIADICS=1 ]
       [ run test_valid_variants7.cpp : : : <define>BOOST_PP_VARIADICS=1 ]
    ;

alias cxxd_mods
    : 
       [ run test_array.cpp ]
       [ run test_atomic.cpp : : : <library>/boost/atomic//boost_atomic ]
       [ run test_atomic2.cpp : : : <library>/boost/atomic//boost_atomic ]
       [ run test_atomic3.cpp : : : <library>/boost/atomic//boost_atomic ]
       [ run test_atomic4.cpp : : : <library>/boost/atomic//boost_atomic ]
       [ run test_atomic5.cpp : : : <library>/boost/atomic//boost_atomic ]
       [ run test_atomic6.cpp : : : <library>/boost/atomic//boost_atomic ]
       [ run test_bind.cpp ]
       [ run test_chrono.cpp ]
       [ run test_chrono2.cpp ]
       [ run test_condition_variable.cpp : : : <library>/boost/thread//boost_thread ]
       [ run test_enable_shared_from_this.cpp ]
       [ run test_enable_shared_from_this2.cpp ]
       [ run test_function.cpp ]
       [ run test_hash.cpp ]
       [ run test_make_shared.cpp ]
       [ run test_make_shared2.cpp ]
       [ run test_mem_fn.cpp ]
       [ run test_mutex.cpp : : : <library>/boost/thread//boost_thread ]
       [ run test_random.cpp : : : <library>/boost/random//boost_random ]
       [ run test_ratio.cpp ]
       [ run test_ref.cpp ]
       [ run test_regex.cpp : : : <library>/boost/regex//boost_regex ]
       [ run test_shared_mutex.cpp : : : <library>/boost/thread//boost_thread ]
       [ run test_shared_ptr.cpp ]
       [ run test_shared_ptr2.cpp test_shared_ptr2_example.cpp ]
       [ run test_system_error.cpp : : : <library>/boost/system//boost_system <library>/boost/thread//boost_thread ]
       [ run test_thread.cpp : : : <library>/boost/thread//boost_thread ]
       [ run test_tuple.cpp ]
       [ run test_type_index.cpp ]
       [ run test_type_traits.cpp ]
       [ run test_unordered_map.cpp ]
       [ run test_unordered_multimap.cpp ]
       [ run test_unordered_multiset.cpp ]
       [ run test_unordered_set.cpp ]
       [ run test_weak_ptr.cpp ]
       [ run test_weak_ptr2.cpp ]
    ;
