[/ 
  (C) Copyright Edward Diener 2015-2016
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section Introduction]

The Cxx dual library, or CXXD for short, is a macro library
which allows the choice between using a Boost library or its 
C++ standard equivalent library for a number of different C++ 
implementations, while using the same code to program either choice.
An 'implementation' is a Boost library which has a C++ standard
library equivalent whose public interfaces are nearly the same
in both cases. An 'implementation' is called a 'dual library'
in this documentation, or 'CXXD-mod' for short.

The library does this by defining object-like macros
for including the appropriate header file and namespace
for using either the Boost library version or the C++ standard
library version of a particular dual library. CXXD
currently supports twenty four different dual libraries,
where the Boost version and the C++ standard version is
nearly interchangeable. CXXD also provides a macro-based solution for
distinguishing between the Boost version and the C++ standard
version of a dual library so that specific code for a
particular dual library choice may be written in those cases
where the public interfaces diverge.

[heading The problem]

Particular functionality of a number of Boost libraries
is duplicated to a great degree by C++ standard libraries, 
most of which were originally created from the equivalent 
Boost libraries. In designing software the choice of a 
particular library to use is often predicated on what is 
available when the end-user compiles the sources for a module.

Given a Boost library, call it BBB, which has an
equivalent C++ standard library, call it SSS, how does
the designer of software choose whether to use BBB
or SSS in his code ?

The normal choice may be presented as:

# Use BBB since it is always available for a given
Boost distribution. This is by far the most popular and widely used decision
for Boost library developers as well as end-users of Boost.
# Use SSS and fail to compile if the C++ standard library is not
available given the compiler options and the C++ compiler
implementation. This is the most popular choice if the
designer of the software insists on a certain level of
C++ standard support, such as that the software is compiled
so that the C++11 standard or higher is supported.
# Support both BBB and SSS in the interface, with the proviso
that if Boost is not being used BBB in the interface is not
used and if the implementation and compiler options 
are not adequate then SSS in the interface is not used.
Being "used" or not is done through preprocessing defines and
preprocessing #if statements. This is the most time consuming 
solution and will result in much duplication of functionality 
to support both BBB and SSS.

As mentioned above the first choice is easily the most popular
since Boost library developers, and those involved using
any one of the approximately current 120+ Boost libraries, assume
that a Boost distribution is always available for the
programmer to use. If you see this choice as always the
single most viable one you need not continue reading
about this library and can move on to what you have always
used with perfect ease of mind.

What are the possible downsides to the first choice ?

* Some programmers, programming groups, businesses
and large corporation employing programmers, do not
like the idea of having to rely on the Boost distribution
as a whole while feeling it is fine to rely on certain
individual Boost libraries.
* Many programmers would like to use the C++ standard libraries
when available with their compiler implementation rather
than have a dependency in their code on the equivalent
Boost library.
* Programmers may be already using C++ standard library SSS in their code
and do not want to have to therefore use the Boost library equivalent BBB
for a particular library interface.

The second choice, always using the C++ standard equivalent library,
will occur less often because of its most obvious
downside, which is that if the C++ standard library is not available
for a particular compiler implementation and C++ standard compiler level the
code will fail to compile. If however you write a library for a
particular level of the C++ standard, such as C++11, and assume a
strong implementation of that standard is needed by certain compilers
which can compile your code, this is often your most viable choice
and you need not continue reading about this library.

The third choice, supporting both the Boost version of a library and the 
equivalent C++ standard version of that library, is obviously programmable but 
entails a much greater amount of work. Each usage of BBB and SSS will entail 
writing code that supports both libraries and this will require a great deal 
of extra code. Furthermore your code will be filled with uses of preprocessor 
#if statements to delineate which usage of BBB or SSS would be available at 
any given time. However if you are happy to do all the extra work to support 
functionality in both BBB and SSS in your code you need not continue reading 
about this library.

[heading The solution]

Any of the three choices presented above can be used and represent
a solution to the problem presented. This particular library
represents a fourth choice, which is more flexible than any of the
three choices listed above, but also has some downsides just like
each of the three choices previously discussed.

The solution presented by the CXXD library is a means of supporting
either BBB or SSS with a single set of code, without having to worry
which is being used at compile time. This is the most important factor
when using CXXD. The single set of code will support both the Boost
and C++ standard equivalents of a particular dual library, with the
particular choice of which implementation for a dual library being
made at compile time.

The solution is predicated on the
fact that for BBB and SSS the exact same functionality is present
for a very large amount of the implementation of both libraries, with
the only difference being the namespace being used and the header file(s)
needing to be included. The solution also
offers the means to distinguish between BBB and SSS for the very small
amount of functionality which may be different between the Boost
and C++ standard version of a library.

The solution is not problem free but will work painlessly most of the 
time, and when it does not work will inform the end-user why during compilation
with preprocessing errors. This documentation will also discuss issues with the solution.

The solution involves the use of macros, all starting with this library's
common mnemonic of CXXD_, which allow a programmer to use the functionality
of equivalent BBB and SSS libraries with a single set of code.

[heading How it works]

For any given library called 'XXX', which has a Boost version BBB and an 
equivalent C++ standard library SSS, the user of the CXXD library starts 
by including a header file called '<boost/cxx_dual/XXX.hpp>'.

In this documentation the library 'XXX" is called, for short,
a 'CXXD-mod', its choices between either a Boost library version or an equivalent
C++ standard library version is called a 'dual library', and the header to be
included in order to use the CXXD-mod is called 
the 'CXXD-mod header'. The action of including a CXXD-header in
the programmer's code is called 'including a CXXD-mod'.

Once the CXXD-mod's CXXD header is included, it will have three mandatory 
macro definitions and one optional macro definition, depending on the particular CXXD-mod.
These definitions, for a particular 'XXX' CXXD-mod, are:

* CXXD_XXX_HEADER, the name of XXX's header file as used by the preprocessor 
'#include' statement. This is called the "CXXD-mod macro header" to distinguish it from
the 'CXXD-mod header', the latter referring to to the initial CXXD-mod header file
which must be included to generate the correct macros.
* CXXD_XXX_NS, the name of XXX CXXD-mod's namespace. This is called the "CXXD-mod namespace".
* CXXD_HAS_STD_XXX, 1 if XXX CXXD-mod's C++ standard library version is being used or
0 if XXX CXXD-mod's Boost library version is being used.
* Optionally CXXD_XXX_MACRO(macro), transforms any XXX CXXD-mod 'macro' to its actual name.

The subsequent usage of these CXXD_ macros in code for any given CXXD-mod is very simple:

# Include the correct CXXD-mod macro header file using '#include CXXD_XXX_HEADER'.
# Access any functionality in the CXXD-mod namespace using 'CXXD_XXX_NS::some_functionality etc...'
or, if there are no name clashes with another namespace, through 'using CXXD_XXX_NS; some_functionality etc...'.
# Use any macro MMM, which is part of the CXXD-mod implementation, 
by specifying 'CXXD_XXX_MACRO(MMM)' as the macro name.
# Optionally it is possible to write specific code for the Boost version of the module
or the C++ standard version of the particular CXXD-mod by using the CXXD_HAS_STD_XXX macro with a 
preprocessor #if statement.

A programmer who, after including a CXXD-mod header for 'XXX' CXXD-mod, proceeds to use any of the
macros defined by that CXXD-mod header, is said to 'use s CXXD-mod'. Please note the distinction between
including a CXXD-mod and using a CXXD-mod. Including a CXXD-mod just defines a set of macros and
is not dependent on any other Boost library or outside implementation. Using a CXXD-mod establishes
dependency on either a Boost library or its equivalent C++ standard library.

[heading Generalized example]

Somewhere in your code you want to use the XXX CXXD-mod, without worrying whether
you are using the Boost version or the C++ standard library version of XXX. Your code
in general may look like:

    #include <boost/cxx_dual/XXX.hpp> // Creates the macros for module XXX by including the appropriate CXXD-mod header
    #include CXXD_XXX_HEADER      // Includes the appropriate CXXD-mod macro header file

    void SomeFunction()
        {
        CXXD_XXX_NS::some_XXX_class a_xxx_object; // Creates an object of some XXX type using the CXXD-mod namespace
        // Use the a_xxx_object in your code...
        #if CXXD_HAS_STD_XXX
        // Some code specific to the C++ standard implementation of XXX
        #else
        // Otherwise some code specific to the Boost implementation of XXX
        #endif
        CXXD_XXX_MACRO(macro) // Use XXX macro 'macro' in some context
        }
        
By far the major use of these CXXD macros, which including a particular CXXD-mod header defines,
will be in the use of the CXXD-mod macro header CXXD_XXX_HEADER, to include the correct 
header file for XXX, and in the CXXD-mod namespace CXXD_XXX_NS, to use the functionality of XXX;
whereas CXXD_HAS_STD_XXX may rarely if ever be used and CXXD_XXX_MACRO(macro) may not even exist for the given 
XXX CXXD-mod.

[endsect]
