[/ 
  (C) Copyright Edward Diener 2015-2016
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section:smods Modules]

A dual library which CXXD supports with its system of macros is called a 
"CXXD-mod" in this documentation, to distinguish the name from 
the general term of "library". A CXXD-mod is a Boost library 
whose functionality largely exists as a C++ standard library,
where the differences between the Boost library and its C++ standard
equivalent are usually very minimal. An example of such a library would
be the Boost regex library, whose equivalent is the C++ standard regex
library, both offering the use of regular expressions in C++ with very
largely the exact same syntax.

I want to make it clear that the choice of using, for example, Boost regex
or C++ standard regex, has little to do with the technical quality of the library.
Both versions are of an extremely high quality and this is true for every Boost library 
which has an equivalent C++ standard library version.

The CXXD-mods supported by CXXD are simply those Boost libraries which have 
a C++ standard equivalent where the syntactical use of either is very largely
the same except for the namespace involved.

The following table lists the CXXD-mods supported by CXXD, in alphabetical order, 
and the appropriate information for each one:

[table:cxxdmods CXXD-Mods
[[CXXD-Mod][Header file][Include macro][Namespace macro][Check C++ standard version macro]]
[[array][<boost/cxx_dual/array.hpp>][CXXD_ARRAY_HEADER][CXXD_ARRAY_NS][CXXD_HAS_STD_ARRAY]]
[[atomic][<boost/cxx_dual/atomic.hpp>][CXXD_ATOMIC_HEADER][CXXD_ATOMIC_NS][CXXD_HAS_STD_ATOMIC]]
[[bind][<boost/cxx_dual/bind.hpp>][CXXD_BIND_HEADER][CXXD_BIND_NS][CXXD_HAS_STD_BIND]]
[[chrono][<boost/cxx_dual/chrono.hpp>][CXXD_CHRONO_HEADER][CXXD_CHRONO_NS][CXXD_HAS_STD_CHRONO]]
[[condition variable][<boost/cxx_dual/condition_variable.hpp>][CXXD_CONDITION_VARIABLE_HEADER][CXXD_CONDITION_VARIABLE_NS][CXXD_HAS_STD_CONDITION_VARIABLE]]
[[enable_shared_from_this][<boost/cxx_dual/enable_shared_from_this.hpp>][CXXD_ENABLE_SHARED_FROM_THIS_HEADER][CXXD_ENABLE_SHARED_FROM_THIS_NS][CXXD_HAS_STD_ENABLE_SHARED_FROM_THIS]]
[[function][<boost/cxx_dual/function.hpp>][CXXD_FUNCTION_HEADER][CXXD_FUNCTION_NS][CXXD_HAS_STD_FUNCTION]]
[[hash][<boost/cxx_dual/hash.hpp>][CXXD_HASH_HEADER][CXXD_HASH_NS][CXXD_HAS_STD_HASH]]
[[make_shared][<boost/cxx_dual/make_shared.hpp>][CXXD_MAKE_SHARED_HEADER][CXXD_MAKE_SHARED_NS][CXXD_HAS_STD_MAKE_SHARED]]
[[mem_fn][<boost/cxx_dual/mem_fn.hpp>][CXXD_MEM_FN_HEADER][CXXD_MEM_FN_NS][CXXD_HAS_STD_MEM_FN]]
[[move][<boost/cxx_dual/move.hpp>][CXXD_MOVE_HEADER][CXXD_MOVE_NS][CXXD_HAS_STD_MOVE]]
[[mutex][<boost/cxx_dual/mutex.hpp>][CXXD_MUTEX_HEADER][CXXD_MUTEX_NS][CXXD_HAS_STD_MUTEX]]
[[random][<boost/cxx_dual/random.hpp>][CXXD_RANDOM_HEADER][CXXD_RANDOM_NS][CXXD_HAS_STD_RANDOM]]
[[ratio][<boost/cxx_dual/ratio.hpp>][CXXD_RATIO_HEADER][CXXD_RATIO_NS][CXXD_HAS_STD_RATIO]]
[[ref][<boost/cxx_dual/ref.hpp>][CXXD_REF_HEADER][CXXD_REF_NS][CXXD_HAS_STD_REF]]
[[regex][<boost/cxx_dual/regex.hpp>][CXXD_REGEX_HEADER][CXXD_REGEX_NS][CXXD_HAS_STD_REGEX]]
[[shared_mutex][<boost/cxx_dual/shared_mutex.hpp>][CXXD_SHARED_MUTEX_HEADER][CXXD_SHARED_MUTEX_NS][CXXD_HAS_STD_SHARED_MUTEX]]
[[shared_ptr][<boost/cxx_dual/shared_ptr.hpp>]
[
* CXXD_SHARED_PTR_HEADER - all shared_ptr related header files
* CXXD_SHARED_PTR_ONLY_HEADER - only the shared_ptr header file
]
[CXXD_SHARED_PTR_NS][CXXD_HAS_STD_SHARED_PTR]]
[[system_error][<boost/cxx_dual/shared_ptr.hpp>][CXXD_SYSTEM_ERROR_HEADER][CXXD_SYSTEM_ERROR_NS][CXXD_HAS_STD_SYSTEM_ERROR]]
[[thread][<boost/cxx_dual/thread.hpp>][CXXD_THREAD_HEADER][CXXD_THREAD_NS][CXXD_HAS_STD_THREAD]]
[[tuple][<boost/cxx_dual/tuple.hpp>][CXXD_TUPLE_HEADER][CXXD_TUPLE_NS][CXXD_HAS_STD_TUPLE]]
[[type_index][<boost/cxx_dual/type_index.hpp>][CXXD_TYPE_INDEX_HEADER][CXXD_TYPE_INDEX_NS][CXXD_HAS_STD_TYPE_INDEX]]
[[type_traits][<boost/cxx_dual/type_traits.hpp>][CXXD_TYPE_TRAITS_HEADER][CXXD_TYPE_TRAITS_NS][CXXD_HAS_STD_TYPE_TRAITS]]
[[unordered_map][<boost/cxx_dual/unordered_map.hpp>][CXXD_UNORDERED_MAP_HEADER][CXXD_UNORDERED_MAP_NS][CXXD_HAS_STD_UNORDERED_MAP]]
[[unordered_multimap][<boost/cxx_dual/unordered_multimap.hpp>][CXXD_UNORDERED_MULTIMAP_HEADER][CXXD_UNORDERED_MULTIMAP_NS][CXXD_HAS_STD_UNORDERED_MULTIMAP]]
[[unordered_multiset][<boost/cxx_dual/unordered_multiset.hpp>][CXXD_UNORDERED_MULTISET_HEADER][CXXD_UNORDERED_MULTISET_NS][CXXD_HAS_STD_UNORDERED_MULTISET]]
[[unordered_set][<boost/cxx_dual/unordered_set.hpp>][CXXD_UNORDERED_SET_HEADER][CXXD_UNORDERED_SET_NS][CXXD_HAS_STD_UNORDERED_SET]]
[[weak_ptr][<boost/cxx_dual/weak_ptr.hpp>][CXXD_WEAK_PTR_HEADER][CXXD_WEAK_PTR_NS][CXXD_HAS_STD_WEAK_PTR]]
]

The naming scheme for each CXXD-mod follows common conventions:

* Each include macro is named starting with the mnemonic CXXD_,
followed by the name CXXD-mod name in uppercase,
followed by the mnemonic \_HEADER.
* Each namespace macro is named starting with the mnemonic CXXD_,
followed by the name CXXD-mod name in uppercase,
followed by the mnemonic \_NS.
* Each checking macro is named starting with the mnemonic CXXD_HAS_STD_,
followed by the name CXXD-mod name in uppercase.

Not listed above in the table is a column for the macro of the form CXXD_XXX_MACRO, which is only 
defined for a CXXD-mod XXX which has equivalent macro names between the C++ standard library 
version and the Boost library version. This macro is used in the form of 
CXXD_XXX_MACRO(MACRO_NAME) to produce the correct macro name for the equivalent macro no 
matter which implementation is being used. Currently, among the CXXD-mods listed above, the only 
one which uses this form is the 'atomic' CXXD-mod. It's name therefore is CXXD_ATOMIC_MACRO 
and it can be used in the form of CXXD_ATOMIC_MACRO(SOME_ATOMIC_MACRO) to produce the correct 
equivalent macro name for the 'atomic' CXXD-mod.

For the 'shared_ptr' dual library the normal header file macro, CXXD_SHARED_PTR_HEADER,
when included brings in the implementations for shared_ptr, weak_ptr, make_shared, and
enable_shared_from_this for either the Boost library or the C++ standard library. The
header file macro, CXXD_SHARED_PTR_ONLY_HEADER, when included brings in only the 
implementation for shared_ptr for either the Boost library or the C++ standard library;
the end-user can then use the separate CXXD functionality for weak_ptr, make_shared,
and enable_shared_from_this in their respective CXXD-mods.

[heading Using the macros ]

The form of using these macros in a translation unit will now be given, 
choosing the regex library as an example.

  #include <boost/cxx_dual/regex.hpp>
  #include CXXD_REGEX_HDR
  
  void SomeFunction()
    {
    CXXD_REGEX_NS::regex re("A regular expression etc.");
    bool result(CXXD_REGEX_NS::regex_match("Some string...",re));
    // etc.
    }
    
In the example the code will work whether we are using the C++ standard regex library
or the Boost regex library.

[heading Using the CXXD_HAS_STD_... macro ]

The 'CXXD_HAS_STD_...' macro for any given CXXD-mod tests whether or not the C++ standard
version of the library is being used, returning '1' if it is used or '0' if it is not used. 
Conversely the form '!CXXD_HAS_STD_...' for any given CXXD-mod tests whether or not the Boost 
version of the library is being used, returning '1' if the Boost version of the library
is being used or '0' if it is not being used.

The CXXD_HAS_STD_... macro for any given CXXD-mod is a more understandable form of macro than
Boost.Config already has for determining whether the compiler supports certain C++ libraries.
Most of these macros are taken from whether or not a given BOOST_NO_CXX11_HDR_ is defined.

You may decide, for a particular code path which will occur very rarely, you need the 
C++ standard version of a particular library, rather than the Boost version, or else you 
do not want your code to compile even though you are using a particular CXXD-mod. 
As an example let's say that you want to create a compile error if the compiler
does not support the C++ standard type_traits library, even though the Boost type_traits
library could also normally be used.

  #include <boost/cxx_dual/type_traits.hpp>
  // Some_code
  #if !CXXD_HAS_STD_TYPE_TRAITS
  #error C++ standard type_traits library needed and not present.
  #endif
  // Further code
  
Another use for the CXXD_HAS_STD_... macro is to include particular header files
rather than a main header file, for some given library functionality. This is
more prevalent with Boost than with the C++ standard library, since the latter almost
always has a single header file which includes library functionality for
all parts of a library. 
    
  #include <boost/cxx_dual/type_traits.hpp>
  #if CXXD_HAS_STD_TYPE_TRAITS
  #include CXXD_TYPE_TRAITS_HDR
  #else
  #include <boost/type_traits/add_const.hpp>
  #endif
  // Further code using BOOST_CPP_TYPE_TRAITS_NS::add_const
  
You can also use the CXXD_HAS_STD_... macro to provide specific functionality
depending on whether or not a particular CXXD-mod is using the C++ standard
or Boost version. Of course you hope to minimize these situations but occasionally
they happen:
  
  #include <boost/cxx_dual/thread.hpp>
  #include CXXD_THREAD_HDR
  // Code...
  
  #if CXXD_HAS_STD_THREAD
  
  // Functionality available if the C++ standard version of the thread library is being used
  
  #else
  
  // Functionality available if the Boost version of the thread library is being used
  
  #endif
  
[heading:hids CXXD-mod identifiers ]

Each CXXD-mod also has an identifier, called a "mod-ID", by which that
CXXD-mod is identified. The mod-ID is a VMD identifier. This means that
it is registered and pre-detected so that CXXD can identify it in macro code.

The mod-IDs are not part of the individual CXXD-mod header files
and do not take part in the individual CXXD-mod processing.
Instead the mod-IDs are used in optional CXXD helper macros,
which will be described later in the documentation, to allow the user of
the particular macro to identify a particular CXXD-mod. Each mod-ID is simply
the name of the CXXD-mod in upper case with 'CXXD_' prepended:

[table:modids Identifiers
[[CXXD-mod][mod-ID]]
[[array][CXXD_ARRAY]]
[[atomic][CXXD_ATOMIC]]
[[bind][CXXD_BIND]]
[[chrono][CXXD_CHRONO]]
[[condition_variable][CXXD_CONDITION_VARIABLE]]
[[enable_shared_from_this][CXXD_ENABLE_SHARED_FROM_THIS]]
[[function][CXXD_FUNCTION]]
[[hash][CXXD_HASH]]
[[make_shared][CXXD_MAKE_SHARED]]
[[mem_fn][CXXD_MEM_FN]]
[[move][CXXD_MOVE]]
[[mutex][CXXD_MUTEX]]
[[random][CXXD_RANDOM]]
[[ratio][CXXD_RATIO]]
[[ref][CXXD_REF]]
[[regex][CXXD_REGEX]]
[[shared_mutex][CXXD_SHARED_MUTEX]]
[[shared_ptr][CXXD_SHARED_PTR]]
[[system_error][CXXD_SYSTEM_ERROR]]
[[thread][CXXD_THREAD]]
[[tuple][CXXD_TUPLE]]
[[type_index][CXXD_TYPE_INDEX]]
[[type_traits][CXXD_TYPE_TRAITS]]
[[unordered_map][CXXD_UNORDERED_MAP]]
[[unordered_multimap][CXXD_UNORDERED_MULTIMAP]]
[[unordered_multiset][CXXD_UNORDERED_MULTISET]]
[[unordered_set][CXXD_UNORDERED_SET]]
[[weak_ptr][CXXD_WEAK_PTR]]
]

The mod-IDs have their own header file:

  #include <boost/cxx_dual/mod_ids.hpp>
  
We will see a use for these mod identifiers when I
discuss optional helper macros which CXXD offers
for the end-user later in the documentation. An end-user,
who wishes to design his own macros to be used with CXXD,
can use the mod-IDs as a means of specifying a particular 
CXXD-mod by including the header file above in his own code.

[heading Mod header file dependency ]

When the programmer includes the appropriate CXXD-mod header file for a particular 
dual library from within the cxx_dual directory there is no dependency
being established on the CXXD-mod itself, whether the module represents a Boost
library or a C++ standard library. Any one of the CXXD header files 
merely defines macros which the programmer may choose to use or not.

Therefore the CXXD library itself does not depend on any of the CXXD-mods it supports.

It is only when using a particular CXXD-mod macro header, along with a particular CXXD-mod namespace,
that a dependency is established.

Because there is no dependency on the CXXD-mod itself when a particular CXXD header is included,
CXXD allows inclusion of all CXDD-mod headers with a single include:

  #include <boost/cxx_dual/cxx_mods.hpp>
  
This is called the "general mod header".

The general mod header includes macros, starting with CXXD_, for each CXXD-mod. As long 
as the prefix CXXD_ does not conflict with macros from any other software 
library in the translation unit there should be no problems even including this
general mod header. Furthermore, since including any individual CXXD-mod header
imposes no dependency on either the Boost version or the C++ standard version of the
dual library itself, including the general mod header above introduces no dependencies
on any of the CXXD-mods in that header file.

[endsect]
