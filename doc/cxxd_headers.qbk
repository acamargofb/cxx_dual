[/ 
  (C) Copyright Edward Diener 2016
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section Header files]

Each mod has its own mod header file.
For a given mod header the end-user would include, for instance:

  #include <boost/cxx_dual/regex.hpp>
  
Each mod header includes its own low-level mod implementation
header file, with the same name as the mod header but in the
'impl' sub-directory. For a given mod implementation header the
end-user would include, for instance:

  #include <boost/cxx_dual/impl/regex.hpp>
  
There are also header files for supporting macros in 'library_name.hpp'
and 'valid_variants.hpp'. These can be included separately as:

  #include <boost/cxx_dual/library_name.hpp>
  #include <boost/cxx_dual/valid_variants.hpp>
  
A separate header file also exists for the various mod_IDs used
by the supporting macros:

  #include <boost/cxx_dual/mod_ids.hpp>
  
There exists no general header file to include all of the header
files in the CXXD library or even all the mods in the CXXD library.
The reason for this is that each mod header file creates a dependency
on the dual library chosen for that mod and creating dependencies
for all 28 of the individual mods in CXXD, through the inclusion
of a general header file, is not something that practically would
ever be done.
  
The code in these header files is largely preprocessor code and macros
which allow the library to work. The macros are dependent on the Boost
Preprocessor library, the Boost.Config library, and for the supporting
macros and their header files the Boost VMD library. All of these
other Boost libraries are header only libraries.

Any header file can be included multiple times in a TU. The only
header files which are actually processed each time they are
included in a TU are the low-level implementation header files.
This is done to ensure the consistency of the dual library chosen
in a TU for a particular mod.

[endsect]
