[/ 
  (C) Copyright Edward Diener 2016
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section Build support]

The CXXD library offers support for build systems.

Sometimes during a build it is necessary to know whether or
not a particular mod uses the Boost implementation or
the C++ standard library implementation for the compiler
being used during a build. This could be because, depending
on the dual library implementation chosen, a library needs to
be linked or an include path needs to be added or a define
needs to be made or for any number of other practical build-type reasons.

CXXD offers support for the Boost Build system specifically or
for other build systems in general. This topic explains that support.

[section Boost Build]

CXXD has build-time support for Boost Build so that depending
on whether a particular mod uses the Boost implementation or
the C++ standard library implementation, a requirement or usage
requirement can be set in a Boost Build rule. Among the useful
built-in rules where this functionality can be used are the run,
compile, link, exe, and lib rules; but any rule which allows the
addition of requirements or usage requirements can be used.

CXXD implements this support by its own Boost Build rules, which can
be used to conditionally set requirements depending on whether or not
specific mods use the Boost implementation or the C++ standard
implementation.

The first thing an end-user of CXXD needs to do to use this functionality
is to import the CXXD Boost build support module. This module is in a
CXXD subdirectory called 'checks' in a jam file called 'cxxd'. So to import
the Boost build support module the the end-user adds to his own jamfile:

  import path_to_cxxd_library/checks/cxxd ;
  
Within the 'cxxd' jam file are three different rules the end-user can use,
all taking the same Boost Build parameters. These rules are:

* cxxd.requires.boost
* cxxd.requires.std
* cxxd.requires.specify

Each rule takes, as a first parameter, a list of one or more names which identify
mods. For the first two rules, 'cxxd.requires.boost' and 'cxxd.requires.std',
these names are the the mods identifying a particular
mod. As an example 'regex' identifies the regex mod. For the third
rule above, 'cxxd.requires.specify', these names are also the mods
identifying a particular CXXD_mod, but are followed by a comma ( ',' ) and then 0
to indicate Boost or 1 to indicate the C++ standard. As examples 'regex,0'
identifies the regex mod with Boost chosen while 'tuple,1' identifies the
tuple mod with the C++ standard chosen.

Essentially the first parameter of
'cxxd.requires.boost' is a shorthand for passing each mod followed by
a comma ( ',' ) and then 0 in 'cxxd.requires.specify' while the first parameter of
'cxxd.requires.std' is a shorthand for passing each mod followed by
a comma ( ',' ) and then 1 in 'cxxd.requires.specify'.

Each rule takes, as an optional second parameter, 0 or more Boost Build requirement or usage requirements.

Each rule takes, as an optional third parameter, 0 or more Boost Build requirement or usage requirements.

A Boost Build requirement or usage requirement is a Boost Build feature.

The way that the 'cxxd.requires.boost' rule works is that if each of the mods
specified use its Boost library implementation, the Boost Build requirements or usage requirements
specified by the optional second parameter is chosen; otherwise the Boost Build requirements
or usage requirements specified by the optional third parameter is chosen.

The way that the 'cxxd.requires.std' rule works is that if each of the mods
specified use its C++ standard library implementation, the Boost Build requirements
or usage requirements specified by the optional second parameter is chosen; otherwise the
Boost Build requirements or usage requirements specified by the optional third parameter is chosen.

The way that the 'cxxd.requires.specific' rule works is that if each of the mods
specified use whichever implementation is chosen through the 0 or 1 addition,
the Boost Build requirements or usage requirements specified by the optional second parameter
is chosen; otherwise the Boost Build requirements or usage requirements specified by the
optional third parameter is chosen. The 'cxxd.requires.specific' rule gives maximum
flexibility in matching each mod with the dual library implementation chosen.

When we use any of these rules we invoke them as:

  cxxd.requires.boost mod... : optional_requirements_may_be_empty : optional_requirements_may_be_empty ;
  cxxd.requires.std mod... : optional_requirements_may_be_empty : optional_requirements_may_be_empty ;
  cxxd.requires.specific mod,0-or-1...   : optional_requirements_may_be_empty : optional_requirements_may_be_empty ;
  
To use the results of these rules in one's own rules you surround these rule
invocations in Boost Build with brackets and spaces ( ' [ ' and ' ] ' ).

As an example, taken directly from the CXXD tests for the CXXD regex implementation,
we have:

  run test_regex.cpp : : : 
    [ cxxd.requires.boost regex : <library>/boost/regex//boost_regex ] ;
  
This says that when we build the test regex example if the Boost regex implementation
is being chosen we want to link in the Boost regex library. As you can see it isn't
necessary to specify both optional requirements when invoking the rule. The exact same
effect could be coded as:
  
  run test_regex.cpp : : : 
    [ cxxd.requires.std regex : : <library>/boost/regex//boost_regex ] ;
  
or as:
  
  run test_regex.cpp : : : 
  [ cxxd.requires.specific regex,0 : <library>/boost/regex//boost_regex ] ;
  
or even as:
  
  run test_regex.cpp : : : 
  [ cxxd.requires.specific regex,1 : : <library>/boost/regex//boost_regex ] ;
  
We can have more than one mod as our first parameter to any of our three rules,
although this is a less common scenario. Let's make up an arbitrary case just to show
how this works. Let's say that when compiling our source file 'my_source.cpp' if CXXD
is choosing both the Boost bind and the Boost function implementations we want to define
a macro called MY_MACRO to 1, else we define MY_MACRO to 0. Here is what our Boost Build
code for this would be:

  compile my_source.cpp : 
    [ cxxd.requires.boost bind function : <define>MY_MACRO=1 : <define>MY_MACRO=0 ] ;
  
We could have more than one feature as our requirements, as in:

  compile my_source.cpp : 
    [ cxxd.requires.boost bind function : 
    <define>MY_MACRO=1 <include>some_directory_path : 
    <define>MY_MACRO=0 ] ;
  
We could have more than one invocation of cxxd.requires.boost, cxxd.requires.std,
or cxxd.requires.specific in our requirements or usage requirements section of a rule,
as in:
  
  compile my_source.cpp : 
    [ cxxd.requires.boost bind function : 
    <define>MY_MACRO=1 <include>some_directory_path : 
    <define>MY_MACRO=0 ] 
    [ cxxd.requires.std regex : : <library>/boost/regex//boost_regex ]
    [ cxxd.requires.specific tuple,1 : <cxxflags>-someflag ] ;
  
With the 'cxxd.requires.specific' rule we can mix Boost and C++ standard
implementations to set our requirements, as in:
    
  compile my_source.cpp : 
    [ cxxd.requires.specific array,1 hash,0 : <include>some_path : <define>some_macro=some_value ] ;
  
Here we are saying that if the array mod uses the C++ standard implementation
and the hash mod uses the Boost implementation, add 'some_path' to the include
paths, else define a macro called 'some_macro' to 'some_value'.  
  
[endsect]

[section General build support]

There are two different means by which CXXD offers general build support
to end-users.

[heading Running a program]

For general build support there is a program in the CXXD build directory,
which the end-user can build using Boost Build with a particular compiler,
which when run will subsequently tell him whether or not particular mods
use their Boost or C++ standard implementations. The program is called
'cxxd_choice'. The resulting program is specific to the compiler used 
when building the program and is self-contained, not relying on any shared
libraries.

When cxxd_choice is invoked it takes as arguments one or more mod
designations followed by a comma ( ',' ) and a 0 indicating a Boost
implementation or a 1 indicating a C++ standard implementation. Examples
for a single argument would be 'regex,0' to designate the Boost implementation
for the regex mod implementation or 'tuple,1' to designate the C++ standard
implementation for the tuple mod implementation. If the arguments all match
the actual dual library implementations chosen the cxxd_choice program
returns 0, otherwise it returns the number of arguments that did not match.
This return value could then be subsequently used in general build systems
to add whatever general build features are needed when a particular mod
dual library choice, or a combination of choices, is made.

It needs to be emphasized that the results of the dual libraries chosen
by default is completely reliant on the compiler invocation used when
building the cxxd_choice program. Please recall that the default algorithm
used by CXXD is that if the C++ standard library implementation of a mod
is available during compilation that choice is made, otherwise the Boost
library implementation for that mod is chosen. Not only will different
compilers offer different default dual library choices in their compiler
implementations but different compiler flags, such as ones designating
the level of C++ support ( c++03, c++11, c++14 ), will change the dual
library choices.

The cxxd_choice program can also write to standard output the results of its
dual library choices. If the first command-line parameter is '-d' or '--debug', besides
returning its 0 or non-zero value, the program will write to standard output
the result of each dual library test made by the subsequent parameters.
The results are in the exact form of:

  Processing 'argument'.
  Parameter 'argument' succeeds.
  Parameter 'argument' fails.
  Parameter 'argument' has an invalid format.
  
each on its own line as applicable, where argument is the actual parameter
subsequently passed as a command-line parameter to the program.

The cxxd_choice program, when passed no parameters, will return 0 but will
also write to standard output the choice for every mod in the form of
individual lines of:

  mod name = 0-or-1
  
where mod name is the lowercase name of the mod, such as 'regex' or 'tuple',
and 0 means the Boost library being chosen while 1 means the C++ standard library
being chosen. The mod names are listed in alphabetical order.

By default when Boost Build builds the cxxd_choice program it will
put its resulting exe in different directories depending on the
compiler chosen when building the program. This means that each compiler
will have its own copy of cxxd_choice, which is what the end-user wants,
but the end-user needs to find the directory where Boost Build will put
the exe. 

The jamfile for building cxxd_choice in the CXXD 'build' subdirectory
has a commented out line, which the end-user could uncomment, for specifying
the exact location for putting the resulting exe. He could use Boost Build
conditional requirements with the <location> property in the commented out
line to specify where the exe should be installed for each compiler toolset he uses,
as long as he gives the 'install' rule a different name for each compiler toolset being used.
If he wanted to change the commented out install rule to manually specify different
locations for different compilers his Boost Build code might look like:

  install cxxd_choice_install_gcc : cxxd_choice : toolset=gcc:<location>gcc_path ;
  install cxxd_choice_install_clang : cxxd_choice : toolset=clang:<location>clang_path ;
  install cxxd_choice_install_msvc : cxxd_choice : toolset=msvc:<location>msvc_path ;
  
The names for the install rule are purely arbitrary, but need to be different
for each toolset chosen.

[heading Testing variants]

For on-the-fly testing of dual library choices there is a source file
in the 'test' directory called 'test_vv.cpp'. This test is represented by
a Boost Build explicit alias called 'tvv'. This means that the test is
only run when you explicitly pass the mnemonic 'tvv' to the command line
when running tests for the CXXD library.

The 'test_vv.cpp' test is just a compile of a program that either succeeds
as a compile or fails. In order to succeed compilation the invoker
of the test must pass on the command line a macro definition for a macro
called 'CXXD_VV' which is equal to a single
[link cxxd.sadvanced.sec_lib.sec_lvvv.vvmac valid variant] macro parameter.
A valid variant macro parameter, which has previously been explained,
is a way of encoding what dual library possibility is wanted. It takes
the form of a VMD sequence of two element tuples where the first element
is the mod-ID and the second element is 0 for the Boost implementation
or 1 for the C++ standard library implementation.

To test the compilation of test_vv.cpp the b2 command line, run in rhe
CXXD test directory, would look like:

  b2 toolset=some_compiler tvv define=CXXD_VV=some_vmd_sequence

A typical VMD sequence might look like:

  (CXXD_REGEX,0)
  
or

  (CXXD_BIND,1)(CXXD_FUNCTION,1)(CXXD_REF,1)
  
so the command line might be something like:

  b2 toolset=gcc tvv define=CXXD_VV=(CXXD_REGEX,0)
  
or 

  b2 toolset=clang tvv define=CXXD_VV=(CXXD_BIND,1)(CXXD_FUNCTION,1)(CXXD_REF,1)
  
If the VMD sequence matches at compile time what the compiler
provides in the way of the default dual library choice for
the mods in the sequence the compilation succeeds, otherwise
the compilation fails.

This on-the-fly invocation of a CXXD test to match dual library
choices could be used by build tools which can specify different
features based on whether a program execution fails or not.
It can also be used by an end-user to determine on-the-fly
whether or not particular mods match in their dual library choices
some desired configuration.

[endsect]

[endsect]
