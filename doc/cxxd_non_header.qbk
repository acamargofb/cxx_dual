[/ 
  (C) Copyright Edward Diener 2016
  Distributed under the Boost Software License, Version 1.0.
  (See accompanying file LICENSE_1_0.txt or copy at
  http://www.boost.org/LICENSE_1_0.txt).
]

[section Use in a non-header only library]

A non-header only library is a library which gets built into a shared library
or a static library. In a traditional non-header only library all the source
code of the library is built into the shared library or static library.
A non-header only library also could contain some code which
is header only along with the code which consists of the built portion of the
library. Because the built portion of a non-header library is code whose
functionality is fixed a non-header only library presents a more difficult
problem when CXXD is used.

[heading The problem]

The reason why a non-header only library presents a problem if CXXD is used
is because CXXD does its work at compile time.
This means that once the built portions of a non-header  
only library get compiled and linked the choice for any of the CXXD dual libraries has 
already been made and essentially encoded into the resulting shared or static library.
This choice is based on the compiler and its command line switches when the non-header
only library is built. The ability of CXXD to choose, for the end-user of the built
portion of the library, at compile time the particular dual library being used is 
eliminated in such a case.

[heading The solution]

But there is a solution. It consists of generating more than one variant for the non-header
only library based on different CXXD dual possibilities. Each variant would have:

* The same code, but possibly slightly different functionality, based on which dual library(s) are chosen.
* A slightly different base library name based on which dual library(s) are chosen.

For a particular non-header only library different variants of the library, 
depending on the CXXD dual library possibilities, are built. Then depending on the end-user's
compiler settings when he uses the library the particular correct variant of the library is 'linked'
to his code as a shared library or as a static library.

[heading The solution in general]

As a simple generalized example without immediately going into all the details,
which I will do shortly, let's suppose that my shared or static library, whose
current base name is called MyLib, is changed to use the CXXD regex interface in a
built portion of the library. The process would be that when MyLib is built it will
consist of two variants; one variant when MyLib is built when using the Boost regex library
and one variant when MyLib is built when using the C++ standard regex library. In order
for this to work I need two separate 'base' names for MyLib, depending on whether
Boost regex or C++ standard regex is the dual library for regex when the library is built.
The choice of these 'base' names will be encoded into the build process for MyLib. When an
end-user uses my library, by including its appropriate header file(s), he links to the 
correct name depending on whether or not CXXD chooses the Boost regex or C++ standard regex 
library as the dual library when the regex CXXD-mod header file gets included.

[heading The solution in detail]

Now let's look in detail, using a simple example, how this would be implemented
in MyLib's code.

First we have MyLib's functionality which uses the CXXD regex interface. Since MyLib
is a non-header only library our functionality will consist of a header file, which
the end-user will include, and a source file, which contains the code which will be
compiled and linked in order to create MyLib's shared or static library. 

When we used a header-only library our example was:

    // Header file MyHeader.hpp
    #include <boost/cxx_dual/regex.hpp>
    #include CXXD_REGEX_HEADER
    class MyClass
        {
        public:
        void MyFunction(CXXD_REGEX_NS::regex &) { /* Some functionality */ }
        };
        
For our non-header only library as the header file for our example, we specify instead:

    // Header file MyHeader.hpp
    #include <boost/cxx_dual/regex.hpp>
    #include CXXD_REGEX_HEADER
    class MyClass
        {
        public:
        void MyFunction(CXXD_REGEX_NS::regex &);
        };
        
This is very little different from what we presented before with a header-only library.
Our difference is that for our non-header only library we are going to compile the 
implementation of MyClass into a shared or static library.
So we now have both our header file and a separate source code file MyHeader.cpp:

we now have both our header file and a separate source code file MyHeader.cpp:

    // Source file MyHeader.cpp
    #include "MyHeader.hpp"
    void MyClass::MyFunction(CXXD_REGEX_NS::regex & rx)
        {
        /* Some Functionality using 'rx' */
        }
        
At this point we have two problems to solve:

* We want to be able to build MyLib as two variants
with different base names, one for compiling when
the CXXD regex module uses the Boost regex library
and one for compiling when the CXXD regex module
uses the C++ standard regex library.
* We want the end-user of MyLib to link to the correct
MyLib variant depending on whether the end-user's
compilation will choose the Boost regex library or
the C++ standard regex library.

[heading Building the library]

The first of our two problems is the easiest to solve.
As long as we have a system for building our library
where we can specify the name of the library we want
along with specifying macros we define for our build on the command line,
we always have a solution for our first problem. 

In specific terms we are going to specify two builds
for our library under two different names, and we are
going to specify appropriate CXXD override macros
on the command line for each build. For the purposes
of our example I will choose the library name 'MyLib'
for the build where the Boost regex library will be
used and the library name 'MyLib_std' for the build
where the C++ standard version of the library will
be used. When we build 'MyLib' we will pass the regex
override macro CXXD_REGEX_USE_BOOST on the command
line of the build process. When we build 'MyLib_std'
we will pass the regex override macro CXXD_REGEX_USE_STD
on the command line of the build process. In Boost bjam
terms this would mean, at minimum:

    lib MyLib : MyHeader.cpp : <define>CXXD_REGEX_USE_BOOST ;
    lib MyLib_std : MyHeader.cpp : <define>CXXD_REGEX_USE_STD ;
    
Other build systems would have their own syntax for building a library.

This is an instance where we use CXXD override macros which we have not seen
before, but it is perfectly valid since we want to force a particular
dual library choice when we build our library. The CXXD override macros
for the CXXD-mod regex are specified in the build and not in a header
file. This allows us to force a particular dual library when we build the
library but otherwise leave the choice of the dual library up to the CXXD
mechanism for choosing the library when MyLib is being used.

When the end-user builds the MyLib library he will pass appropriate
command line switches which determine whether or not the C++ standard
regex library is supported. If the C++ standard regex library is not 
supported by appropriate command line switches the build of 'MyLib'
should still succeed but the build of 'MyLib_std' will fail. This is
as it should be. A build of MyLib with the appropriate commamnd line
switches ( usually C++11 support ) will succeed in also building 'MyLib_std'.

[heading Linking to the library]

The end-user of our built library will include our MyHeader.hpp
and whether the Boost regex library is chosen or the C++ standard
regex library is chosen will be determined at compile time when
the end-user compiles his code. Our problem is that when the end-user
includes MyHeader.hpp in a compilation we would like to be able to
specify at that time, based on which dual regex library is being used,
the correctly named library to which to link.

The solution to our problem lies in auto-linking for those compilers
which support it. Without auto-linking what we can do is provide some sort of documentation
specifying the name of our library depending on the dual library choice
which occurs when the end-user uses our library.

In either case, whether the compiler supports auto-linking or not,
what we want to do in MyLib is to create a header file
which will encode the correct name of our library as a preprocessor
macro depending on our dual library choice. This can be easily done in
our example because each dual library has a macro which will tell us at
compile time which choice has been made. For our example with the regex
library the macro is CXXD_HAS_STD_REGEX, which is 1 if the C++ standard
regex library is being used and 0 if the Boost regex library is being used.
Furthermore, for those compilers which support auto-linking, we want to
provide whatever compiler mechanism is available to auto-link to our correct
library name. For my example I will use the auto-linking mechanism that is
built into Boost.Config. We only want this auto-link header file's functionality
to be used when we are not building MyLib, ie. when MyLib is being used
by another library or executable.

In our example we will add a header file to our MyLib library and call it
MyLibName.hpp:

    // Header file MyLibName.hpp
    #include <boost/cxx_dual/regex.hpp>
    #if CXXD_HAS_STD_REGEX
        #define MYLIB_LIBRARY_NAME MyLib_std
    #else
        #define MYLIB_LIBRARY_NAME MyLib
    #endif
    
We will also add a header file to our MyLib library and call it MyLibLink.hpp:

    // Header file MyLibLink.hpp
    #include <boost/config.hpp>
    #if !defined(BOOST_ALL_NO_LIB) && !defined(BOOST_MY_LIBRARY_NO_LIB) && !defined(MYLIB_BEING_BUILT)
    #include "MyLibName.hpp"
    #define BOOST_LIB_NAME MYLIB_LIBRARY_NAME
    #if defined MYLIB_DYN_LINK
        #define BOOST_DYN_LINK
    #endif
    #include <boost/config/auto_link.hpp>
    #endif
    
We alter the header file which the end-user sees, MyHeader.hpp,
to include our auto-linking code in MyLibLink.hpp:

    // Header file MyHeader.hpp
    #include <boost/cxx_dual/regex.hpp>
    #include CXXD_REGEX_HEADER
    #include "MyLibLink.hpp"
    class MyClass
        {
        public:
        void MyFunction(CXXD_REGEX_NS::regex &);
        };
        
We want to change our code which builds the MyLib variants to define the MYLIB_BEING_BUILT
macro:
        
    lib MyLib : MyHeader.cpp : <define>CXXD_REGEX_USE_BOOST <define>MYLIB_BEING_BUILT ;
    lib MyLib_std : MyHeader.cpp : <define>CXXD_REGEX_USE_STD <define>MYLIB_BEING_BUILT ;
    
As part of the auto-linking mechanism of Boost config the end-user of our library 
could also define the MYLIB_DYN_LINK, before including MyHeader.hpp in his code, 
to auto-link to the shared library version instead of the
static library version of the appropriate MyLib variant.
    
For the end-user which is using a compiler that does not support
auto-linking we should make sure to document the built variant names of our
library depending on whether the end-user compilation chooses the Boost regex
library or the C++ standard regex library. That end-user will have to manually
link the correct library name in his own code. This is usually done by adding the
name of the library to the linker command line.

As an added tool for that end-user whose compiler does not support auto-linking
the MyLib build could also create a program which prints to standard output the name
of the library to link using the library name generated in our MyLibName.hpp header
file. We could do that with a source file called MyLibName.cpp:

    // Source file MyLibName.cpp
    #include <iostream>
    #include "MyLibName.hpp"
    #define MYLIB_LIBRARY_NAME_AS_STRING #MYLIB_LIBRARY_NAME
    int main()
        {
        std::cout << "The MyLib library name is: '" << MYLIB_LIBRARY_NAME_AS_STRING << "'.";
        return 0;
        }
        
In our example this could be added to the Boost jam file that builds the library variants as:
        
    exe MyLibName : MyLibName.cpp ;
    
When the end-user invokes our build jamfile the MyLibName program is built
with whatever command line options the end-user uses. Depending on those
command line options the MyLibName executable will print the appropriate
name of the MyLib library for those options. For an end-user without auto-linking
he could then use that name to successful link MyLib to his own library or executable.

In Boost the library name as specified by the library author 
is often not the actual final generated name of the library, since Boost can decorate the
library author's name for his library with other information. Using Boost
auto-linking facilities this discrepancy between what the library author passes
to the Boost.config auto-linking mechanism and the actual generated final name of the
library is automatically handled. For compilers that do not support
auto-linking it is up to the end-user to understand what the generated final name
of the library will be as compared to the name given by the library author. The
MyLibName will generate the correct name given by the library author, so it is then
up to the user of the library to understand the generated final name. This is no
different from what happens when CXXD is not being used.
    
[heading Working with possible library variants]

I have chosen a very simple example in using CXXD in the built portion of a non-header only 
library. This is because my example uses a single CXXD-mod in the built code, and the built code
consists of a single source file with its corresponding header file. It is
quite probable, however, that a non-header only library uses many more CXXD modules in the 
built portion of the library and that the use of CXXD modules occurs in many more source files 
with their corresponding header files. While the exact same principles apply when using a number 
of CXXD mods as using a single one, an important issue that comes up when using a number of CXXD 
mods is whether we have to support all possible library variants and how we would limit the possible 
variants if necessary.

Let's consider that if the number of separate CXXD mods in the built portion of a non-header
only library is designated as 'n', we have [power 2..n] of different CXXD combinations which the end-user
of our library could use. As an example, for just 4 different CXXD moduled being included, we now
have 16 different variants of our library to support and build. Furthermore, when counting
the CXXD modules being included we must take into account
the number of CXXD mods being used in the built portion of a non-header only library as not only
being those CXXD mods our library is directly using but also possibly CXXD mods being used by
other libraries which our own non-header only library is using in its built portion. Clearly the number
of CXXD modules in the built portion of a non-header only library may proliferate to an unmanageable
amount if we have to build every possible variant.

Despite the fact that there are [power 2..n] possible variants it is quite possible that the library 
developer will choose to support many less variants. In fact very often he may choose to support only two variants. 
Those two variants are often divided by whether or not the library is being compiled in C++11 on up mode or 
not. For most, if not all, of the CXXD-mods in a given compiler implementation, when compiling in C++11 on up
mode the C++ standard library version of the dual library is available and when not compiling in C++11
mode on up only the Boost version will be available. So realistically, even when the number 'n' of different
CXXD modules are being used by the built portion of a non-header only library, the library developer
may choose to support only two variants, either all Boost libraries or all C++ standard library
equivalents.

Whatever the choice of the number of variants supported in a non-header only library compared
to the maximum number of variants possible based on the CXXD-mods used by that library in its
built portion, we need some way to name each of the variants supported and we may 
need some way to intelligently limit the number of variants supported.

Let's take a look at our example MyLib and let's see what we have to do to support more library
variants and possibly limit the number of variants. Imagine that in the source of the library being built
we are supporting more than simply the regex CXXD-mod but also other CXXD-mods. For the
sake of this updated example let's suppose we also are using the CXXD array, CXXD function, and
CXXD tuple mods in the built portion of MyLib. We will do this by adding some functionality
to our MyHeader interface. In actuality the built portion of a non-header only library
will usually encompass far more than a single source/header file pairing, but for the sake of
our still fairly simple example we will continue to imagine a single source/header pairing. 

Our updated Myheader.hpp will now look like:

    // Header file MyHeader.hpp
    #include <boost/cxx_dual/array.hpp>
    #include <boost/cxx_dual/function.hpp>
    #include <boost/cxx_dual/regex.hpp>
    #include <boost/cxx_dual/tuple.hpp>
    #include CXXD_ARRAY_HEADER
    #include CXXD_FUNCTION_HEADER
    #include CXXD_REGEX_HEADER
    #include CXXD_TUPLE_HEADER
    #include "MyLibLink.hpp"
    class MyClass
        {
        public:
        void MyFunction(CXXD_REGEX_NS::regex &);
        void AFunction(CXXD_ARRAY_NS::array<int,5> &);
        void AnotherFunction(CXXD_FUNCTION_NS::function<long (double)> &);
        void YetAnotherFunction(CXXD_TUPLE_NS::tuple<float,short> &);
        };
        
Our updated MyHeader.cpp will now look like:
        
    // Source file MyHeader.cpp
    #include "MyHeader.hpp"
    void MyClass::MyFunction(CXXD_REGEX_NS::regex & rx)
        {
        /* Some Functionality using 'rx' */
        }
    void MyClass::AFunction(CXXD_ARRAY_NS::array<int,5> & arr)
        {
        /* Some Functionality using 'arr' */
        }
    void MyClass::AnotherFunction(CXXD_FUNCTION_NS::function<long (double)> & fun)
        {
        /* Some Functionality using 'fun' */
        }
    void MyClass::YetAnotherFunction(CXXD_TUPLE_NS::tuple<float,short> &tup)
        {
        /* Some Functionality using 'tup' */
        }
        
If we look back at our MyLibName.hpp we can both extend the name of the
library to encompass more variants as well as limit the variants we wish to allow. Allowing all
our new variants could give us something like:

    // Header file MyLibName.hpp
    #include <boost/cxx_dual/array.hpp>
    #include <boost/cxx_dual/function.hpp>
    #include <boost/cxx_dual/regex.hpp>
    #include <boost/cxx_dual/tuple.hpp>
    #if CXXD_HAS_STD_ARRAY
        #if CXXD_HAS_STD_FUNCTION
            #if CXXD_HAS_STD_REGEX
                #if CXXD_HAS_STD_TUPLE
                    #define MYLIB_LIBRARY_NAME MyLib_std
                #else
                    #define MYLIB_LIBRARY_NAME MyLib_ar_fn_rx
                #endif
            #elif CXXD_HAS_STD_TUPLE
                #define MYLIB_LIBRARY_NAME MyLib_ar_fn_tp
            #else
                #define MYLIB_LIBRARY_NAME MyLib_ar_fn
            #endif
        #elif CXXD_HAS_STD_REGEX
            #if CXXD_HAS_STD_TUPLE
                #define MYLIB_LIBRARY_NAME MyLib_ar_rx_tp
            #else
                #define MYLIB_LIBRARY_NAME MyLib_ar_rx
            #endif
        #elif CXXD_HAS_STD_TUPLE
            #define MYLIB_LIBRARY_NAME MyLib_ar_tp
        #else
            #define MYLIB_LIBRARY_NAME MyLib_ar
        #endif
    #elif CXXD_HAS_STD_FUNCTION
        #if CXXD_HAS_STD_REGEX
            #if CXXD_HAS_STD_TUPLE
                #define MYLIB_LIBRARY_NAME MyLib_fn_rx_tp
            #else
                #define MYLIB_LIBRARY_NAME MyLib_fn_rx
            #endif
        #elif CXXD_HAS_STD_TUPLE
            #define MYLIB_LIBRARY_NAME MyLib_fn_tp
        #else
            #define MYLIB_LIBRARY_NAME MyLib_fn
        #endif
    #elif CXXD_HAS_STD_REGEX
        #if CXXD_HAS_STD_TUPLE
            #define MYLIB_LIBRARY_NAME MyLib_rx_tp
        #else
            #define MYLIB_LIBRARY_NAME MyLib_rx
        #endif
    #elif CXXD_HAS_STD_TUPLE
        #define MYLIB_LIBRARY_NAME MyLib_tp
    #else
        #define MYLIB_LIBRARY_NAME MyLib
    #endif
    
That is some complicated-looking code to just give a name to each variant,
but it is really just a series of tests of all 16 combinations of CXXD_HAS_STD_'XXX'
for the possible 'XXX' CXXD mod being used. It is actually more tedious than
really complicated. We just have to choose a naming convention for our variants
so that all variant names are unique. In our case the manual naming convention
chosen is that each CXXD mod where the C++ standard library is being chosen has a
two character abbreviation preceded by an underscore appended to the base 'MyLib'
name, but if all the CXXD mods have the C++ standard library being chosen the mnemonic
'_std' is appended to the base 'MyLib' name instead. Furthermore the appends are
done in the alphabetical order of CXXD mods being used. This manual scheme is
purely arbitrary for naming variants when building a non-header only library and,
of course, the library developer using CXXD may choose whatever manual scheme
he wishes to give each variant he chooses to support a unique name. 

Later in this documentation section I will discuss CXXD support in the form of a 
CXXD macro which which the library developer can use to automate the naming scheme
if he wishes with a single invocation of the macro.

Now suppose we do not want to support all variants in MyLib but just a subset of the 16
possible variants in our example. As one case suppose we want to support only those variants
where both CXXD array and CXXD function are both using either the Boost library
or both are using the C++ standard library. Our changed MyLibName.hpp could then be:
    
    // Header file MyLibName.hpp
    #include <boost/cxx_dual/array.hpp>
    #include <boost/cxx_dual/function.hpp>
    #include <boost/cxx_dual/regex.hpp>
    #include <boost/cxx_dual/tuple.hpp>
    #if CXXD_HAS_STD_ARRAY
        #if CXXD_HAS_STD_FUNCTION
            #if CXXD_HAS_STD_REGEX
                #if CXXD_HAS_STD_TUPLE
                    #define MYLIB_LIBRARY_NAME MyLib_std
                #else
                    #define MYLIB_LIBRARY_NAME MyLib_ar_fn_rx
                #endif
            #elif CXXD_HAS_STD_TUPLE
                #define MYLIB_LIBRARY_NAME MyLib_ar_fn_tp
            #else
                #define MYLIB_LIBRARY_NAME MyLib_ar_fn
            #endif
        #else
            #error MyLib - CXXD configuration not supported where array and function differ.
        #endif
    #elif CXXD_HAS_STD_FUNCTION
        #error MyLib - CXXD configuration not supported where array and function differ.
    #elif CXXD_HAS_STD_REGEX
        #if CXXD_HAS_STD_TUPLE
            #define MYLIB_LIBRARY_NAME MyLib_rx_tp
        #else
            #define MYLIB_LIBRARY_NAME MyLib_rx
        #endif
    #elif CXXD_HAS_STD_TUPLE
        #define MYLIB_LIBRARY_NAME MyLib_tp
    #else
        #define MYLIB_LIBRARY_NAME MyLib
    #endif
    
We have simplified the file producing half the number of variants as before,
and we have produced a means by which we notify the end-user at compile
time of the variants we do not support. Of course we could and should also
notify the end-user of MyLib in the documentation about the variants we do
or do not support. But the nice thing is that we can produce a compile-time
error, in the form of a preprocessor error, while still using CXXD to limit
the subset of variants. 

Later in this documentation section I will discuss 
CXXD support in the form of a CXXD macro which which the library developer 
can use to test for all his valid variant possibilities with a single macro invocation.

Suppose we simplify further in a manner I suggested previously where we
will only support the two variants which most likely corresponds to the end-user
compiling with C++11 on up support or not. Now our MyLibName.hpp gets much simpler:
    
    // Header file MyLibName.hpp
    #include <boost/cxx_dual/array.hpp>
    #include <boost/cxx_dual/function.hpp>
    #include <boost/cxx_dual/regex.hpp>
    #include <boost/cxx_dual/tuple.hpp>
    #if CXXD_HAS_STD_ARRAY && CXXD_HAS_STD_FUNCTION && CXXD_HAS_STD_REGEX && CXXD_HAS_STD_TUPLE
        #define MYLIB_LIBRARY_NAME MyLib_std
    #elif !(CXXD_HAS_STD_ARRAY || CXXD_HAS_STD_FUNCTION || CXXD_HAS_STD_REGEX || CXXD_HAS_STD_TUPLE)
        #define MYLIB_LIBRARY_NAME MyLib
    #else
        #error CXXD configuration only supported if all dual libraries are Boost or all dual libraries are C++ standard.
    #endif
    
Here we have further simplified the number of variants, theoretically producing builds which either
support C++11 on up or do not support C++11 on up, the latter usually meaning C++03 support. 
Of course this may produce problems if the end-user wants to compile in C++11 mode but the compiler
the end-user uses has C++ standard support for one or more of the CXXD modules we are using but not
all of those we are using. In that case the end-user would encounter the preprocessor error 
directive in he example above. However even in that case the end-user could turn off C++11 mode when 
compiling and link to the MyLib variant which supports all Boost libraries for the CXXD mods without
getting an error.

In these examples the library author needs to adjust the build of his library
to only build the variants which he allows. In Boost terms rhis means modifying
jam file which builds his library. 

With our first extended example, for all 16 variants, the updated jam file would be, at minimum:
    
    lib MyLib : MyHeader.cpp : <define>CXXD_ARRAY_USE_BOOST <define>CXXD_FUNCTION_USE_BOOST <define>CXXD_REGEX_USE_BOOST <define>CXXD_TUPLE_USE_BOOST <define>MYLIB_BEING_BUILT ;
    lib MyLib_std : MyHeader.cpp : <define>CXXD_ARRAY_USE_STD <define>CXXD_FUNCTION_USE_STD <define>CXXD_REGEX_USE_STD <define>CXXD_TUPLE_USE_STD <define>MYLIB_BEING_BUILT ;
    lib MyLib_ar_fn_rx : MyHeader.cpp : <define>CXXD_ARRAY_USE_STD <define>CXXD_FUNCTION_USE_STD <define>CXXD_REGEX_USE_STD <define>CXXD_TUPLE_USE_BOOST <define>MYLIB_BEING_BUILT ;
    lib MyLib_ar_fn_tp : MyHeader.cpp : <define>CXXD_ARRAY_USE_STD <define>CXXD_FUNCTION_USE_STD <define>CXXD_REGEX_USE_BOOST <define>CXXD_TUPLE_USE_STD <define>MYLIB_BEING_BUILT ;
    lib MyLib_ar_fn : MyHeader.cpp : <define>CXXD_ARRAY_USE_STD <define>CXXD_FUNCTION_USE_STD <define>CXXD_REGEX_USE_BOOST <define>CXXD_TUPLE_USE_BOOST <define>MYLIB_BEING_BUILT ;
    lib MyLib_ar_rx_tp : MyHeader.cpp : <define>CXXD_ARRAY_USE_STD <define>CXXD_FUNCTION_USE_BOOST <define>CXXD_REGEX_USE_STD <define>CXXD_TUPLE_USE_STD <define>MYLIB_BEING_BUILT ;
    lib MyLib_ar_rx : MyHeader.cpp : <define>CXXD_ARRAY_USE_STD <define>CXXD_FUNCTION_USE_BOOST <define>CXXD_REGEX_USE_STD <define>CXXD_TUPLE_USE_BOOST <define>MYLIB_BEING_BUILT ;
    lib MyLib_ar_tp : MyHeader.cpp : <define>CXXD_ARRAY_USE_STD <define>CXXD_FUNCTION_USE_BOOST <define>CXXD_REGEX_USE_BOOST <define>CXXD_TUPLE_USE_STD <define>MYLIB_BEING_BUILT ;
    lib MyLib_ar : MyHeader.cpp : <define>CXXD_ARRAY_USE_STD <define>CXXD_FUNCTION_USE_BOOST <define>CXXD_REGEX_USE_BOOST <define>CXXD_TUPLE_USE_BOOST <define>MYLIB_BEING_BUILT ;
    lib MyLib_fn_rx_tp : MyHeader.cpp : <define>CXXD_ARRAY_USE_BOOST <define>CXXD_FUNCTION_USE_STD <define>CXXD_REGEX_USE_STD <define>CXXD_TUPLE_USE_STD <define>MYLIB_BEING_BUILT ;
    lib MyLib_fn_rx : MyHeader.cpp : <define>CXXD_ARRAY_USE_BOOST <define>CXXD_FUNCTION_USE_STD <define>CXXD_REGEX_USE_STD <define>CXXD_TUPLE_USE_BOOST <define>MYLIB_BEING_BUILT ;
    lib MyLib_fn_tp : MyHeader.cpp : <define>CXXD_ARRAY_USE_BOOST <define>CXXD_FUNCTION_USE_STD <define>CXXD_REGEX_USE_BOOST <define>CXXD_TUPLE_USE_STD <define>MYLIB_BEING_BUILT ;
    lib MyLib_fn : MyHeader.cpp : <define>CXXD_ARRAY_USE_BOOST <define>CXXD_FUNCTION_USE_STD <define>CXXD_REGEX_USE_BOOST <define>CXXD_TUPLE_USE_BOOST <define>MYLIB_BEING_BUILT ;
    lib MyLib_rx_tp : MyHeader.cpp : <define>CXXD_ARRAY_USE_BOOST <define>CXXD_FUNCTION_USE_BOOST <define>CXXD_REGEX_USE_STD <define>CXXD_TUPLE_USE_STD <define>MYLIB_BEING_BUILT ;
    lib MyLib_rx : MyHeader.cpp : <define>CXXD_ARRAY_USE_BOOST <define>CXXD_FUNCTION_USE_BOOST <define>CXXD_REGEX_USE_STD <define>CXXD_TUPLE_USE_BOOST <define>MYLIB_BEING_BUILT ;
    lib MyLib_tp : MyHeader.cpp : <define>CXXD_ARRAY_USE_BOOST <define>CXXD_FUNCTION_USE_BOOST <define>CXXD_REGEX_USE_BOOST <define>CXXD_TUPLE_USE_STD <define>MYLIB_BEING_BUILT ;
    
With our second extended example, with its 8 variants, the updated jam file would be, at minimum:
    
    lib MyLib : MyHeader.cpp : <define>CXXD_ARRAY_USE_BOOST <define>CXXD_FUNCTION_USE_BOOST <define>CXXD_REGEX_USE_BOOST <define>CXXD_TUPLE_USE_BOOST <define>MYLIB_BEING_BUILT ;
    lib MyLib_std : MyHeader.cpp : <define>CXXD_ARRAY_USE_STD <define>CXXD_FUNCTION_USE_STD <define>CXXD_REGEX_USE_STD <define>CXXD_TUPLE_USE_STD <define>MYLIB_BEING_BUILT ;
    lib MyLib_ar_fn_rx : MyHeader.cpp : <define>CXXD_ARRAY_USE_STD <define>CXXD_FUNCTION_USE_STD <define>CXXD_REGEX_USE_STD <define>CXXD_TUPLE_USE_BOOST <define>MYLIB_BEING_BUILT ;
    lib MyLib_ar_fn_tp : MyHeader.cpp : <define>CXXD_ARRAY_USE_STD <define>CXXD_FUNCTION_USE_STD <define>CXXD_REGEX_USE_BOOST <define>CXXD_TUPLE_USE_STD <define>MYLIB_BEING_BUILT ;
    lib MyLib_ar_fn : MyHeader.cpp : <define>CXXD_ARRAY_USE_STD <define>CXXD_FUNCTION_USE_STD <define>CXXD_REGEX_USE_BOOST <define>CXXD_TUPLE_USE_BOOST <define>MYLIB_BEING_BUILT ;
    lib MyLib_rx_tp : MyHeader.cpp : <define>CXXD_ARRAY_USE_BOOST <define>CXXD_FUNCTION_USE_BOOST <define>CXXD_REGEX_USE_STD <define>CXXD_TUPLE_USE_STD <define>MYLIB_BEING_BUILT ;
    lib MyLib_rx : MyHeader.cpp : <define>CXXD_ARRAY_USE_BOOST <define>CXXD_FUNCTION_USE_BOOST <define>CXXD_REGEX_USE_STD <define>CXXD_TUPLE_USE_BOOST <define>MYLIB_BEING_BUILT ;
    lib MyLib_tp : MyHeader.cpp : <define>CXXD_ARRAY_USE_BOOST <define>CXXD_FUNCTION_USE_BOOST <define>CXXD_REGEX_USE_BOOST <define>CXXD_TUPLE_USE_STD <define>MYLIB_BEING_BUILT ;
    
With our third extended example, with its 2 variants, the updated jam file would be, at minimum:
    
    lib MyLib : MyHeader.cpp : <define>CXXD_ARRAY_USE_BOOST <define>CXXD_FUNCTION_USE_BOOST <define>CXXD_REGEX_USE_BOOST <define>CXXD_TUPLE_USE_BOOST <define>MYLIB_BEING_BUILT ;
    lib MyLib_std : MyHeader.cpp : <define>CXXD_ARRAY_USE_STD <define>CXXD_FUNCTION_USE_STD <define>CXXD_REGEX_USE_STD <define>CXXD_TUPLE_USE_STD <define>MYLIB_BEING_BUILT ;

Aside from the functional changes in MyLib itself, to use more CXXD mods in the
built portion of the library, the changes to a proposed MyLibName.hpp in our example
and the changes to the jam file used to build the non-header only library 
are the only ones that need to be done to support more variants, 
and possibly limit the variants compared to the total number possible. 
The rest of the infrastructure in our example remains in place.

[endsect]

[section Support for naming library variants and testing all valid possibilities]

CXXD offers support, based on the CXXD-mods which are being included, in the form of macros 
for naming a library variant and for testing all valid possibilities. These macros can be used
to provide a more automatic methodology for accomplishing the goals which can be found
in the manual methods employed in the MyLibName.hpp sample headers specified previously. It is completely
up to the end-user of CXXD whether he finds it easier to use the macros which I will describe
or whether he finds it easier to use the manual methods previously explained and illustrated.

Both macros I will be discussing use preprocessor identifiers known to CXXD for
identifying the various CXXD-mods. These preprocessor identifiers and their
particular CXXD-mod are given in this table:

[table:modids CXXD-mod identifiers
[[CXXD-mod][CXXD-mod id]]
[[array][CXXD_ARRAY]]
[[atomic][CXXD_ATOMIC]]
[[bind][CXXD_BIND]]
[[chrono][CXXD_CHRONO]]
[[condition_variable][CXXD_CONDITION_VARIABLE]]
[[enable_shared_from_this][CXXD_ENABLE_SHARED_FROM_THIS]]
[[function][CXXD_FUNCTION]]
[[hash][CXXD_HASH]]
[[make_shared][CXXD_MAKE_SHARED]]
[[mem_fn][CXXD_MEM_FN]]
[[mutex][CXXD_MUTEX]]
[[random][CXXD_RANDOM]]
[[ratio][CXXD_RATIO]]
[[ref][CXXD_REF]]
[[regex][CXXD_REGEX]]
[[shared_mutex][CXXD_SHARED_MUTEX]]
[[shared_ptr][CXXD_SHARED_PTR]]
[[system_error][CXXD_SYSTEM_ERROR]]
[[thread][CXXD_THREAD]]
[[tuple][CXXD_TUPLE]]
[[type_index][CXXD_TYPE_INDEX]]
[[type_traits][CXXD_TYPE_TRAITS]]
[[unordered_map][CXXD_UNORDERED_MAP]]
[[unordered_multimap][CXXD_UNORDERED_MULTIMAP]]
[[unordered_multiset][CXXD_UNORDERED_MULTISET]]
[[unordered_set][CXXD_UNORDERED_SET]]
[[weak_ptr][CXXD_WEAK_PTR]]
[[all CXXD-mods][CXXD_MODS_ALL]]
]

All the CXXD-mod identifiers are essentially 'CXXD_'
followed by the common name of a CXXD-mod in uppercase.
The CXXD_MODS_ALL identifier refers to all CXXD-mods
in slightly different ways in the two macros which follow.
These CXXD-mod identifiers only have significance in the
following macros and play no role in the CXXD-mod headers
which have been previously documented.

[heading Macro naming a library variant]

There is a macro in CXXD for naming a library variant based on the dual library chosen
for the CXXD-mods being included when the macro is actually invoked. This macro provides
an automatic methodology for naming which can replace a manual method the end-user
may have chosen to use. The macro is a variadic macro whose name and signature is:

    CXXD_LIBRARY_NAME(...)
    
The macro is in the header file <boost/cxx_dual/library_name.hpp>
    
The macro takes one or more variadic parameters. The single required variadic parameter is
the base name of the library. The remaining variadic parameters are optional and are
Boost PP tuples. 

Each tuple has one to three elements. The first element, which is mandatory,
is one of the CXXD-mod identifiers given above.
The second optional element, which may be empty, is a preprocessor identifier to be appended 
to the base name if the particular CXXD-mod is being included and the C++ standard library has been 
chosen as the dual library. The third optional element, which may also be empty, is a preprocessor 
identifier to be added to the base name if the particular
CXXD-mod is being included and the Boost library has been chosen as the dual library.

If the first element CXXD-mod identifier is not recognized, the entire tuple is ignored.

The optional parameters allow the macro invoker to specify his own identifiers to be appended to the base
library name for each CXXD-mod being included. If he does not specify his own identifier
for a particular CXXD-mod by using an optional variadic parameter, defaults values are chosen instead.

Given the required base name for a library and the optional remaining variadic parameters
the macro expands to a library variant name.

The default values to be appended to the base name for each CXXD-mod,
depending on whether that CXXD-mod uses the C++ standard library or the Boost library,
are given in the following table:

[table:library_name Library name defaults
[[CXXD-mod id][C++ standard]]
[[CXXD_ARRAY][_ar]]
[[CXXD_ATOMIC][_at]]
[[CXXD_BIND][_bd]]
[[CXXD_CHRONO][_ch]]
[[CXXD_CONDITION_VARIABLE][_cv]]
[[CXXD_ENABLE_SHARED_FROM_THIS][_es]]
[[CXXD_FUNCTION][_fn]]
[[CXXD_HASH][_ha]]
[[CXXD_MAKE_SHARED][_ms]]
[[CXXD_MEM_FN][_mf]]
[[CXXD_MUTEX][_mx]]
[[CXXD_RANDOM][_rd]]
[[CXXD_RATIO][_ra]]
[[CXXD_REF][_rf]]
[[CXXD_REGEX][_rx]]
[[CXXD_SHARED_MUTEX][_sm]]
[[CXXD_SHARED_PTR][_sp]]
[[CXXD_SYSTEM_ERROR][_se]]
[[CXXD_THREAD][_th]]
[[CXXD_TUPLE][_tu]]
[[CXXD_TYPE_INDEX][_ti]]
[[CXXD_TYPE_TRAITS][_tt]]
[[CXXD_UNORDERED_MAP][_um]]
[[CXXD_UNORDERED_MULTIMAP][_up]]
[[CXXD_UNORDERED_MULTISET][_ut]]
[[CXXD_UNORDERED_SET][_us]]
[[CXXD_WEAK_PTR][_wp]]
[[CXXD_MODS_ALL][_std]]
]
    
As can be seen in the default table above:

* Preprocessor identifiers are appended to the base name only when the C++ standard library has been
chosen as the dual library for a particular CXXD-mod. Nothing is appended to the base name when the
Boost library has been chosen for a particular CXXD-mod.
* The particular preprocessor identifiers added are two-character mnemonics preceded by an underscore.
This was done to provide the smallest unique identifier while more clearly separating each mnemonic
in the final name.

The 'CXXD_MODS_ALL' identifier specifies a single mnemonic, in place of all the individual mnemonics, 
to be added to the base name if all the CXXD-mods being used have either their C++ standard
chosen as the dual library or their Boost library chosen as the dual library. In the default
case above if all the CXXD-mods being used have the C++ standard library as the dual library
the final library variant name is the base name of the library with '_std' appended, while
if all the CXXD-mods being used have the Boost library as the dual library the final library 
variant name is just the base name.

In the default case any appended mnemonics are added to the base name in the alphabetical
order in which the individual CXXD-mods occur in the default table above and not in the order in which
the CXXD-mods are included.

The way that the CXXD_LIBRARY_NAME works, when the single required base name is passed to the macro, 
is exactly the manual method I have previously used when specifying unique variant names in the 
MyLibName.hpp samples given above. I chose to illustrate the manual method in the documentation 
based on the way that the CXXD_LIBRARY_NAME macro is designed to work when no optional parameters
are specified, but of course an end-user, manually specifying unique library variant names
instead of using the CXXD_LIBRARY_NAME macro, can use any schema he wants.

The default naming of CXXD_LIBRARY_NAME guarantees that if Boost is consistently being 
chosen as the dual library instead of the equivalent C++ standard library, which is what will naturally
happen in the vast majority of cases if C++11 on up mode is not being used during
compilation, the library name generated by CXXD_LIBRARY_NAME is the same as the base name. 
This latter is, I believe, what Boost library authors would expect in their non-header only libraries.

The end-user changes the default naming scheme by passing as optional parameters
one or more Boost PP tuples for each CXXD-mod where he wants a different mnemonic to be appended
to the base name. In this case the Boost PP tuple specifies a different mnemonic to be used for
a particular CXXD-mod, depending on whether the dual library to be chosen for that CXXD-mod
is the C++ standard library or the Boost library. The order of the mnemonics to be appended
also changes according to the order of the CXXD-mod identifiers he specifies in the optional
parameters, so that optional parameter mnemonics always precede default mnemonic choices in
the final expanded name.

A number of examples will be given using the four CXXD-mods we have previously chosen
in our examples for MyLibName.hpp header file and some arbitrarily chosen combinations.
These arbitrarily chosen combinations are specified purely to illustrate how the macro works:

    #include <boost/cxx_dual/array.hpp>
    #include <boost/cxx_dual/function.hpp>
    #include <boost/cxx_dual/regex.hpp>
    #include <boost/cxx_dual/tuple.hpp>
    #include <boost/cxx_dual/library_name.hpp>

    /* If array uses Boost, function uses C++ standard, regex uses C++ standard, tuple uses Boost then: */
    
    CXXD_LIBRARY_NAME(MyLib) expands to 'MyLib_fn_rx'
    
    /* If array uses C++ standard, function uses C++ standard, regex uses C++ standard, tuple uses C++ standard then: */
    
    CXXD_LIBRARY_NAME(MyLib) expands to 'MyLib_std'
    
    /* If array uses Boost, function uses Boost, regex uses Boost, tuple uses Boost then: */
    
    CXXD_LIBRARY_NAME(MyLib) expands to 'MyLib'
    
    /* If array uses Boost, function uses C++ standard, regex uses C++ standard, tuple uses Boost then: */
    
    CXXD_LIBRARY_NAME(MyLib,(CXXD_REGEX,RStd,_rboost)) expands to 'MyLibRStd_fn'
    
    /* If array uses Boost, function uses C++ standard, regex uses Boost, tuple uses Boost then: */
    
    CXXD_LIBRARY_NAME(MyLib,(CXXD_TUPLE,_cpp_tuple,_boost_tuple),(CXXD_ARRAY,,_bboost)) expands to 'MyLib_boost_tuple_bboost_fn'
    
    /* If array uses Boost, function uses Boost, regex uses Boost, tuple uses Boost then: */
    
    CXXD_LIBRARY_NAME(MyLib,(CXXD_ALL,Std,Boost)) expands to 'MyLibBoost'
    
    /* If array uses C++ standard, function uses C++ standard, regex uses C++ standard, tuple uses C++ standard then: */
    
    CXXD_LIBRARY_NAME(MyLib,(CXXD_ALL,Std,Boost)) expands to 'MyLibStd'
    
If we look at the MyLibName.hpp as presented previously we can use the CXXD_LIBRARY_NAME
to simplify the syntax of the file. In the first case, where we do not try to limit the
variants, our file would be:
    
    // Header file MyLibName.hpp
    #include <boost/cxx_dual/array.hpp>
    #include <boost/cxx_dual/function.hpp>
    #include <boost/cxx_dual/regex.hpp>
    #include <boost/cxx_dual/tuple.hpp>
    #include <boost/cxx_dual/library_name.hpp>
    #define MYLIB_LIBRARY_NAME CXXD_LIBRARY_NAME(MyLib)
    
In the second case where we do limit the variants so that CXXD-mod array and CXXD-mod function
always choose the same dual library, our file would be:
    
    // Header file MyLibName.hpp
    #include <boost/cxx_dual/array.hpp>
    #include <boost/cxx_dual/function.hpp>
    #include <boost/cxx_dual/regex.hpp>
    #include <boost/cxx_dual/tuple.hpp>
    #include <boost/cxx_dual/library_name.hpp>
    #if (CXXD_HAS_STD_ARRAY && !CXXD_HAS_STD_FUNCTION) || (!CXXD_HAS_STD_ARRAY && CXXD_HAS_STD_FUNCTION)
        #error MyLib - CXXD configuration not supported where array and function differ.
    #else
        #define MYLIB_LIBRARY_NAME CXXD_LIBRARY_NAME(MyLib)
    #endif
    
In the third case where we limit our variants to the two choices of all Boost
or all C++ standard libraries, our file would be:
    
    // Header file MyLibName.hpp
    #include <boost/cxx_dual/array.hpp>
    #include <boost/cxx_dual/function.hpp>
    #include <boost/cxx_dual/regex.hpp>
    #include <boost/cxx_dual/tuple.hpp>
    #include <boost/cxx_dual/library_name.hpp>
    #if (CXXD_HAS_STD_ARRAY && CXXD_HAS_STD_FUNCTION && CXXD_HAS_STD_REGEX && CXXD_HAS_STD_TUPLE) || \
        !(CXXD_HAS_STD_ARRAY || CXXD_HAS_STD_FUNCTION || CXXD_HAS_STD_REGEX || CXXD_HAS_STD_TUPLE)
        #define MYLIB_LIBRARY_NAME CXXD_LIBRARY_NAME(MyLib)
    #else
        #error CXXD configuration only supported if all dual libraries are Boost or all dual libraries are C++ standard.
    #endif
    
In all cases the invocation of the single CXXD_LIBRARY_NAME macro simplifies our MyLibName.hpp header file.
Nonetheless the choice of using the CXXD_LIBRARY_NAME macro or manually name the
library variants is totally up to the library author.
    
[heading Macro testing all possibilities]

There is a macro in CXXD for testing whether the CXXD-mods which are included,
when the macro is actually invoked, match one or more combinations of dual 
library possibilities. This macro provides an
automatic method for testing all dual library possibilities at once and offers 
an alternative to the manual testing of dual library possibilities which the end-user
may have chosen to use. The macro is a variadic macro whose name and signature is:

    CXXD_VALID_VARIANTS(...)
    
The macro is in the header file <boost/cxx_dual/valid_variants.hpp>

The variadic parameters are ways of encoding the various CXXD dual library
combinations which the library author considers valid for his library. If the
dual libraries chosen for the CXXD-mods being included match any of combinations
represented by the variadic parameters the macro expands to 1, otherwise it expands
to 0.

Each variadic parameter represents a 'possibility'. Each possibility is 
a series of Boost PP tuples. This 'series' in the VMD library is called a VMD sequence.

Each Boost PP tuple in the series has two elements. The first Boost PP tuple element is a
CXXD-mod identifier as listed previously.
The second Boost PP tuple element is either 0 or 1,
meaning respectively that for the CXXD-mod specified the dual library is Boost (0) or 
the dual library is the C++ standard library (1). If a CXXD-mod identifier as the
first tuple element is not recognized, or if the second tuple element is not 0 or 1,
that tuple is ignored as part of a possibility but the possibility itself is still considered.

The Boost PP tuple encoding identifies a valid 
choice for the library being built for a single CXXD-mod. The series of Boost PP tuples 
combine the valid choices into a single possibility. When a particular CXXD-mod
is not part of a possibility, as encoded by a CXXD-mod identifier, it simply means that 
if that CXXD-mod's header is included it can validly use either its Boost or C++ standard library
as far as the possibility is concerned.

As an arbitrary example of a possibility:

    (CXXD_REGEX,0)(CXXD_ARRAY,1)(CXXD_TUPLE,1)
    
as one of our variadic parameters says that a situation where the regex CXXD-mod
uses the Boost library while the CXXD array and tuple mods use the C++ standard
library is a valid possibility for the library.

The library author can specify as many valid possibilities as he chooses as
variadic parameters but at least one possibility has to be specified to
use the macro. If all possible combinations of the CXXD-mods being included are
valid there is absolutely no point in using the CXXD_VALID_VARIANTS macro as
we have no intention of limiting the possible variants by using the macro.

For the CXXD_MODS_ALL identifier only one tuple should define the possibility.
The designation as a variadic parameter of:

    (CXXD_MODS_ALL,0)
    
says that a valid possibility is that every CXXD-mod included uses Boost as
the dual library. The designation as a variadic parameter of:

    (CXXD_MODS_ALL,1)
    
says that a valid possibility is that every CXXD-mod included uses the C++
standard library as the dual library. If the CXXD_MODS_ALL tuple is combined with
other tuples as part of a possibility the other tuples are ignored.

A number of examples will be given using the four CXXD-mods we have previously chosen
in our examples for MyLibName.hpp header file and some arbitrarily chosen valid possibilities.
These arbitrarily chosen valid possibilities are specified purely to illustrate how the macro works:

    #include <boost/cxx_dual/array.hpp>
    #include <boost/cxx_dual/function.hpp>
    #include <boost/cxx_dual/regex.hpp>
    #include <boost/cxx_dual/tuple.hpp>
    #include <boost/cxx_dual/valid_variants.hpp>
    
    /* Valid possibilities are:
    1) All four CXXD-mods use the Boost library
    2) CXXD-mod array uses the Boost library, 
       CXXD-mod function uses the C++ standard library, 
       CXXD-mod tuple uses the Boost library,
       CXXD-mod regex uses either the Boost library or the C++ standard library
    */
    
    CXXD_VALID_VARIANTS((CXXD_MODS_ALL,0),(CXXD_ARRAY,0)(CXXD_FUNCTION,1)(CXXD_TUPLE,0))
        
    /* Valid possibilities are:
    1) All four CXXD-mods use the C++standard library
    2) CXXD-mod array uses the Boost library, 
       CXXD-mod function uses the Boost library 
       CXXD-mod tuple uses the Boost library or the C++ standard library,
       CXXD-mod regex uses the Boost library or the C++ standard library
    */
    
    CXXD_VALID_VARIANTS((CXXD_MODS_ALL,1),(CXXD_ARRAY,0)(CXXD_FUNCTION,0))
        
    /* Valid possibilities are:
    1) CXXD-mod array uses the Boost library, 
       CXXD-mod function uses the Boost library 
       CXXD-mod tuple uses the Boost library or the C++ standard library,
       CXXD-mod regex uses the Boost library or the C++ standard library
    2) CXXD-mod array uses the C++ standard library, 
       CXXD-mod function uses the C++ standard library 
       CXXD-mod tuple uses the Boost library or the C++ standard library,
       CXXD-mod regex uses the Boost library or the C++ standard library
    */
    
    CXXD_VALID_VARIANTS((CXXD_ARRAY,0)(CXXD_FUNCTION,0),(CXXD_ARRAY,1)(CXXD_FUNCTION,1))
        
    /* Valid possibilities are:
    1) All four CXXD-mods use the Boost library
    2) All four CXXD-mods use the C++standard library
    3) CXXD-mod regex uses the Boost library
       CXXD-mod tuple uses the C++ standard library
       CXXD-mod array uses the Boost library or the C++ standard library,
       CXXD-mod function uses the Boost library or the C++ standard library
    */
    
    CXXD_VALID_VARIANTS((CXXD_MODS_ALL,0),(CXXD_MODS_ALL,1),(CXXD_REGEX,0)(CXXD_TUPLE,1))
    
Essentially the CXXD_VALID_VARIANTS present an alternate form of '#if (CXXD_HAS_STD_XXX ...)'
preprocessor constructs which are used to limit the CXXD-mod possibilities which a particular
library decides is valid. If we take our example MyLibName.hpp which limit the possibilities
of dual libraries combinations we can re-code our second and third case using this macro.
Since our first case, which does not limit the possibilities, has no use for using the 
CXXD_VALID_VARIANTS macro, we do not illustrate its use with the macro.

In the second case where we do limit the variants so that CXXD-mod array and CXXD-mod function
always choose the same dual library, our file would now be:

    // Header file MyLibName.hpp
    #include <boost/cxx_dual/array.hpp>
    #include <boost/cxx_dual/function.hpp>
    #include <boost/cxx_dual/regex.hpp>
    #include <boost/cxx_dual/tuple.hpp>
    #include <boost/cxx_dual/valid_variants.hpp>
    #if CXXD_VALID_VARIANTS((CXXD_ARRAY,0)(CXXD_FUNCTION,0),(CXXD_ARRAY,1)(CXXD_FUNCTION,1))
        #define MYLIB_LIBRARY_NAME CXXD_LIBRARY_NAME(MyLib)
    #else
        #error MyLib - CXXD configuration not supported where array and function differ.
    #endif
    
In the third case where we limit our variants to the two choices of all Boost
or all C++ standard libraries, our file would now be:
    
    // Header file MyLibName.hpp
    #include <boost/cxx_dual/array.hpp>
    #include <boost/cxx_dual/function.hpp>
    #include <boost/cxx_dual/regex.hpp>
    #include <boost/cxx_dual/tuple.hpp>
    #include <boost/cxx_dual/valid_variants.hpp>
    #if CXXD_VALID_VARIANTS((CXXD_MODS_ALL,0),(CXXD_MODS_ALL,1))
        #define MYLIB_LIBRARY_NAME CXXD_LIBRARY_NAME(MyLib)
    #else
        #error CXXD configuration only supported if all dual libraries are Boost or all dual libraries are C++ standard.
    #endif
    
In both cases we produce shorter versions of our MyLibName.hpp code.

[heading Using CXXD_VALID_VARIANTS for a header-only library]
    
Even though their is little practical benefit of limiting possibilities of CXXD-mod dual library
choices when the situation is a header only library as opposed to the non-header only library
we have been discussing, the CXXD_VALID_VARIANTS macro 
could be used in that situation also. As an example let us suppose we have a header-only
library which uses CXXD-mod array and CXXD-mod function along with other CXXD-mods.
As we have done in one of our non-header only MyLibName.hpp examples we arbitrarily decide that the
array and function dual library choices should always match. We could code up a header
file for the sole purpose of producing a preprocessor error if our array and function dual
library choices do not match, and then include that header file in all are header-only
library header files as a check to make sure they match whenever any of our header files is included.
Our checking header file might be called MyHeaderOnlyLibCheck.hpp:
        
    // Header file MyHeaderOnlyLibCheck.hpp
    #include <boost/cxx_dual/array.hpp>
    #include <boost/cxx_dual/function.hpp>
    #include <boost/cxx_dual/valid_variants.hpp>
    #if !CXXD_VALID_VARIANTS((CXXD_ARRAY,0)(CXXD_FUNCTION,0),(CXXD_ARRAY,1)(CXXD_FUNCTION,1))
        #error MyLib - CXXD configuration not supported where array and function differ.
    #endif
    
We now include that header file in all of the header files of our header-only library and every time
the end-user uses one of our header files a check is made to ensure that the dual libraries
for array and function match.

Of course we could simply eschew the use of the CXXD_VALID_VARIANTS macro in this case and 
simply code up our MyHeaderOnlyLibCheck.hpp header file in this way:
    
    // Header file MyHeaderOnlyLibCheck.hpp
    #include <boost/cxx_dual/array.hpp>
    #include <boost/cxx_dual/function.hpp>
    #if !((CXXD_HAS_STD_ARRAY && CXXD_HAS_STD_FUNCTION) || (!CXXD_HAS_STD_ARRAY && !CXXD_HAS_STD_FUNCTION))
        #error MyLib - CXXD configuration not supported where array and function differ.
    #endif
    
Whether the possibility of using the CXXD_VALID_VARIANTS macro is considered for a
non-header only library, its main purpose, or a header-only library,
the choice of using the CXXD_VALID_VARIANTS macro or manually test the individual
CXXD_HAS_STD_'XXX' macros is totally up to the library author.
    
[endsect]
